(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{104:function(e,t,n){"use strict";n.r(t),n.d(t,"Lessons",(function(){return s}));var o=n(0),i=n(3);n(97);async function s(){const e=await Object(o.e)(".main-content-scrollable");for(console.log(e);e.childNodes.length;)e.removeChild(e.lastChild);const t=e.clientWidth;let n,s;console.log(t),t>600&&t<900?(n=480,s=299):t>900&&t<1200?(n=960,s=569):t>1200&&(n=1440,s=839);const d=Object(o.c)("div","linked-lists");d.innerHTML="<div><h3>Linked Lists</h3>\n    <p>Slide 1) The unshift method adds a new node to the beginning of the linked list. We can see that as each new node is created <i>this.next</i> points to the following node.</p>\n    <p>Slide 2) The push method adds a new node to the end of the linked list. The <i>this.next</i> property of the previous node points to our new node.</p>\n    <p>Slide 3) The insertAt method adds a new node to the specified position in the list. The <i>this.next</i> property of the previous node points to our new node.</p>\n    <div><h3>Linked Lists</h3>\n    <p>Slide 1) The unshift method adds a new node to the beginning of the linked list. We can see that as each new node is created <i>this.next</i> points to the following node.</p>\n    <p>Slide 2) The push method adds a new node to the end of the linked list. The <i>this.next</i> property of the previous node points to our new node.</p>\n    <p>Slide 3) The insertAt method adds a new node to the specified position in the list. The <i>this.next</i> property of the previous node points to our new node.</p>\n    <p>Slide 1) The unshift method adds a new node to the beginning of the linked list. We can see that as each new node is created <i>this.next</i> points to the following node.</p>\n    <p>Slide 2) The push method adds a new node to the end of the linked list. The <i>this.next</i> property of the previous node points to our new node.</p>\n    <p>Slide 3) The insertAt method adds a new node to the specified position in the list. The <i>this.next</i> property of the previous node points to our new node.</p>\n    </div>";const h=Object(o.c)("div","doc-wrapper"),p=Object(o.c)("iframe","slides");p.src="https://docs.google.com/presentation/d/e/2PACX-1vTDsnjcpJ49de8trQkESBQbLFeeqywV_VJB_mgb5l1oqsaLTs5Rp8rS-XbDhjFeJDpqrNuZ34GGCabs/embed?start=false&loop=false&delayms=3000",p.frameborder="0",p.allowfullscreen="true",p.mozallowfullscreen="true",p.webkitallowfullscreen="true",h.appendChild(p),e.appendChild(d),e.appendChild(h),e.appendChild(Object(i.a)())}},97:function(e,t,n){var o=n(1),i=n(98);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var s={insert:"head",singleton:!1},d=(o(i,s),i.locals?i.locals:{});e.exports=d},98:function(e,t,n){}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQ29tcG9uZW50cy9MZXNzb25zL0xlc3NvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbXBvbmVudHMvTGVzc29ucy9MZXNzc29ucy5zY3NzPzY0NDkiXSwibmFtZXMiOlsiYXN5bmMiLCJMZXNzb25zIiwibWFpbkNvbnRlbnRTY3JvbGxhYmxlIiwiY29uc29sZSIsImxvZyIsImNoaWxkTm9kZXMiLCJsZW5ndGgiLCJyZW1vdmVDaGlsZCIsImxhc3RDaGlsZCIsIndpZHRoIiwiY2xpZW50V2lkdGgiLCJmcmFtZVdpZHRoIiwiZnJhbWVIZWlnaHQiLCJsaW5rTGlzdCIsImlubmVySFRNTCIsImRvY1dyYXBwZXIiLCJkb2MiLCJzcmMiLCJmcmFtZWJvcmRlciIsImFsbG93ZnVsbHNjcmVlbiIsIm1vemFsbG93ZnVsbHNjcmVlbiIsIndlYmtpdGFsbG93ZnVsbHNjcmVlbiIsImFwcGVuZENoaWxkIiwiYXBpIiwiY29udGVudCIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwibW9kdWxlIiwiaSIsIm9wdGlvbnMiLCJleHBvcnRlZCIsImxvY2FscyIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJpS0FNT0EsZUFBZUMsSUFHbEIsTUFBTUMsUUFBOEIsWUFBRyw0QkFFdkMsSUFEQUMsUUFBUUMsSUFBSUYsR0FDTEEsRUFBc0JHLFdBQVdDLFFBQ3BDSixFQUFzQkssWUFBWUwsRUFBc0JNLFdBRzVELE1BQU1DLEVBQVFQLEVBQXNCUSxZQUV4QyxJQUFJQyxFQUFZQyxFQURaVCxRQUFRQyxJQUFJSyxHQUVSQSxFQUFRLEtBQU9BLEVBQVEsS0FDdkJFLEVBQWEsSUFDYkMsRUFBYyxLQUVQSCxFQUFRLEtBQU9BLEVBQVEsTUFDOUJFLEVBQWEsSUFDYkMsRUFBYyxLQUdQSCxFQUFRLE9BQ2ZFLEVBQWEsS0FDYkMsRUFBYyxLQUdsQixNQUFNQyxFQUFXLFlBQUssTUFBTyxnQkFDN0JBLEVBQVNDLFVBQ1QsK2tEQWFBLE1BQU1DLEVBQWEsWUFBSyxNQUFPLGVBQ3pCQyxFQUFNLFlBQUssU0FBVSxVQUMzQkEsRUFBSUMsSUFBTSw0S0FDVkQsRUFBSUUsWUFBWSxJQUNoQkYsRUFBSUcsZ0JBQWdCLE9BQ3BCSCxFQUFJSSxtQkFBbUIsT0FDdkJKLEVBQUlLLHNCQUFzQixPQUUxQk4sRUFBV08sWUFBWU4sR0FFdkJkLEVBQXNCb0IsWUFBWVQsR0FDbENYLEVBQXNCb0IsWUFBWVAsR0FDbENiLEVBQXNCb0IsWUFBWSxpQixtQkMzRHRDLElBQUlDLEVBQU0sRUFBUSxHQUNGQyxFQUFVLEVBQVEsSUFJQyxpQkFGdkJBLEVBQVVBLEVBQVFDLFdBQWFELEVBQVFFLFFBQVVGLEtBRy9DQSxFQUFVLENBQUMsQ0FBQ0csRUFBT0MsRUFBSUosRUFBUyxNQUc5QyxJQUFJSyxFQUFVLENBRWQsT0FBaUIsT0FDakIsV0FBb0IsR0FJaEJDLEdBRlNQLEVBQUlDLEVBQVNLLEdBRVhMLEVBQVFPLE9BQVNQLEVBQVFPLE9BQVMsSUFJakRKLEVBQU9LLFFBQVVGLEciLCJmaWxlIjoiNS44YzNlMGRiZDYzMjNiNjI4NGMyNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgY2VjbCwgcXMgfSBmcm9tICcuLi9IZWxwZXJzL2RvbUhlbHBlcidcbmltcG9ydCB7IEZvb3RlciB9IGZyb20gJy4uL0Zvb3Rlci9Gb290ZXIuanMnXG5pbXBvcnQgJy4vTGVzc3NvbnMuc2NzcydcblxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gTGVzc29ucygpIHtcblxuXG4gICAgY29uc3QgbWFpbkNvbnRlbnRTY3JvbGxhYmxlID0gYXdhaXQgcXMoXCIubWFpbi1jb250ZW50LXNjcm9sbGFibGVcIik7XG4gICAgY29uc29sZS5sb2cobWFpbkNvbnRlbnRTY3JvbGxhYmxlKVxuICAgIHdoaWxlIChtYWluQ29udGVudFNjcm9sbGFibGUuY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgICAgbWFpbkNvbnRlbnRTY3JvbGxhYmxlLnJlbW92ZUNoaWxkKG1haW5Db250ZW50U2Nyb2xsYWJsZS5sYXN0Q2hpbGQpXG4gICAgfVxuXG4gICAgY29uc3Qgd2lkdGggPSBtYWluQ29udGVudFNjcm9sbGFibGUuY2xpZW50V2lkdGhcbiAgICBjb25zb2xlLmxvZyh3aWR0aClcbmxldCBmcmFtZVdpZHRoLCBmcmFtZUhlaWdodFxuICAgIGlmICh3aWR0aCA+IDYwMCAmJiB3aWR0aCA8IDkwMCkge1xuICAgICAgICBmcmFtZVdpZHRoID0gNDgwXG4gICAgICAgIGZyYW1lSGVpZ2h0ID0gMjk5XG5cbiAgICB9IGVsc2UgaWYgKHdpZHRoID4gOTAwICYmIHdpZHRoIDwgMTIwMCkge1xuICAgICAgICBmcmFtZVdpZHRoID0gOTYwXG4gICAgICAgIGZyYW1lSGVpZ2h0ID0gNTY5XG5cblxuICAgIH0gZWxzZSBpZiAod2lkdGggPiAxMjAwKSB7XG4gICAgICAgIGZyYW1lV2lkdGggPSAxNDQwXG4gICAgICAgIGZyYW1lSGVpZ2h0ID0gODM5XG4gICAgfVxuXG4gICAgY29uc3QgbGlua0xpc3QgPSBjZWNsKCdkaXYnLCAnbGlua2VkLWxpc3RzJylcbiAgICBsaW5rTGlzdC5pbm5lckhUTUwgPSBcbiAgICBgPGRpdj48aDM+TGlua2VkIExpc3RzPC9oMz5cbiAgICA8cD5TbGlkZSAxKSBUaGUgdW5zaGlmdCBtZXRob2QgYWRkcyBhIG5ldyBub2RlIHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGxpbmtlZCBsaXN0LiBXZSBjYW4gc2VlIHRoYXQgYXMgZWFjaCBuZXcgbm9kZSBpcyBjcmVhdGVkIDxpPnRoaXMubmV4dDwvaT4gcG9pbnRzIHRvIHRoZSBmb2xsb3dpbmcgbm9kZS48L3A+XG4gICAgPHA+U2xpZGUgMikgVGhlIHB1c2ggbWV0aG9kIGFkZHMgYSBuZXcgbm9kZSB0byB0aGUgZW5kIG9mIHRoZSBsaW5rZWQgbGlzdC4gVGhlIDxpPnRoaXMubmV4dDwvaT4gcHJvcGVydHkgb2YgdGhlIHByZXZpb3VzIG5vZGUgcG9pbnRzIHRvIG91ciBuZXcgbm9kZS48L3A+XG4gICAgPHA+U2xpZGUgMykgVGhlIGluc2VydEF0IG1ldGhvZCBhZGRzIGEgbmV3IG5vZGUgdG8gdGhlIHNwZWNpZmllZCBwb3NpdGlvbiBpbiB0aGUgbGlzdC4gVGhlIDxpPnRoaXMubmV4dDwvaT4gcHJvcGVydHkgb2YgdGhlIHByZXZpb3VzIG5vZGUgcG9pbnRzIHRvIG91ciBuZXcgbm9kZS48L3A+XG4gICAgPGRpdj48aDM+TGlua2VkIExpc3RzPC9oMz5cbiAgICA8cD5TbGlkZSAxKSBUaGUgdW5zaGlmdCBtZXRob2QgYWRkcyBhIG5ldyBub2RlIHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGxpbmtlZCBsaXN0LiBXZSBjYW4gc2VlIHRoYXQgYXMgZWFjaCBuZXcgbm9kZSBpcyBjcmVhdGVkIDxpPnRoaXMubmV4dDwvaT4gcG9pbnRzIHRvIHRoZSBmb2xsb3dpbmcgbm9kZS48L3A+XG4gICAgPHA+U2xpZGUgMikgVGhlIHB1c2ggbWV0aG9kIGFkZHMgYSBuZXcgbm9kZSB0byB0aGUgZW5kIG9mIHRoZSBsaW5rZWQgbGlzdC4gVGhlIDxpPnRoaXMubmV4dDwvaT4gcHJvcGVydHkgb2YgdGhlIHByZXZpb3VzIG5vZGUgcG9pbnRzIHRvIG91ciBuZXcgbm9kZS48L3A+XG4gICAgPHA+U2xpZGUgMykgVGhlIGluc2VydEF0IG1ldGhvZCBhZGRzIGEgbmV3IG5vZGUgdG8gdGhlIHNwZWNpZmllZCBwb3NpdGlvbiBpbiB0aGUgbGlzdC4gVGhlIDxpPnRoaXMubmV4dDwvaT4gcHJvcGVydHkgb2YgdGhlIHByZXZpb3VzIG5vZGUgcG9pbnRzIHRvIG91ciBuZXcgbm9kZS48L3A+XG4gICAgPHA+U2xpZGUgMSkgVGhlIHVuc2hpZnQgbWV0aG9kIGFkZHMgYSBuZXcgbm9kZSB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBsaW5rZWQgbGlzdC4gV2UgY2FuIHNlZSB0aGF0IGFzIGVhY2ggbmV3IG5vZGUgaXMgY3JlYXRlZCA8aT50aGlzLm5leHQ8L2k+IHBvaW50cyB0byB0aGUgZm9sbG93aW5nIG5vZGUuPC9wPlxuICAgIDxwPlNsaWRlIDIpIFRoZSBwdXNoIG1ldGhvZCBhZGRzIGEgbmV3IG5vZGUgdG8gdGhlIGVuZCBvZiB0aGUgbGlua2VkIGxpc3QuIFRoZSA8aT50aGlzLm5leHQ8L2k+IHByb3BlcnR5IG9mIHRoZSBwcmV2aW91cyBub2RlIHBvaW50cyB0byBvdXIgbmV3IG5vZGUuPC9wPlxuICAgIDxwPlNsaWRlIDMpIFRoZSBpbnNlcnRBdCBtZXRob2QgYWRkcyBhIG5ldyBub2RlIHRvIHRoZSBzcGVjaWZpZWQgcG9zaXRpb24gaW4gdGhlIGxpc3QuIFRoZSA8aT50aGlzLm5leHQ8L2k+IHByb3BlcnR5IG9mIHRoZSBwcmV2aW91cyBub2RlIHBvaW50cyB0byBvdXIgbmV3IG5vZGUuPC9wPlxuICAgIDwvZGl2PmBcblxuICAgIGNvbnN0IGRvY1dyYXBwZXIgPSBjZWNsKCdkaXYnLCAnZG9jLXdyYXBwZXInKVxuICAgIGNvbnN0IGRvYyA9IGNlY2woJ2lmcmFtZScsICdzbGlkZXMnKVxuICAgIGRvYy5zcmMgPSBgaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vcHJlc2VudGF0aW9uL2QvZS8yUEFDWC0xdlREc25qY3BKNDlkZTh0clFrRVNCUWJMRmVlcXl3Vl9WSkJfbWdiNWwxb3FzYUxUczVScDhyUy1YYkRoakZlSkRwcXJOdVozNEdHQ2Ficy9lbWJlZD9zdGFydD1mYWxzZSZsb29wPWZhbHNlJmRlbGF5bXM9MzAwMGBcbiAgICBkb2MuZnJhbWVib3JkZXI9XCIwXCIgXG4gICAgZG9jLmFsbG93ZnVsbHNjcmVlbj1cInRydWVcIiBcbiAgICBkb2MubW96YWxsb3dmdWxsc2NyZWVuPVwidHJ1ZVwiIFxuICAgIGRvYy53ZWJraXRhbGxvd2Z1bGxzY3JlZW49XCJ0cnVlXCJcblxuICAgIGRvY1dyYXBwZXIuYXBwZW5kQ2hpbGQoZG9jKVxuXG4gICAgbWFpbkNvbnRlbnRTY3JvbGxhYmxlLmFwcGVuZENoaWxkKGxpbmtMaXN0KVxuICAgIG1haW5Db250ZW50U2Nyb2xsYWJsZS5hcHBlbmRDaGlsZChkb2NXcmFwcGVyKVxuICAgIG1haW5Db250ZW50U2Nyb2xsYWJsZS5hcHBlbmRDaGlsZChGb290ZXIoKSlcblxufSIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0xlc3Nzb25zLnNjc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cbnZhciBleHBvcnRlZCA9IGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB7fTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0ZWQ7Il0sInNvdXJjZVJvb3QiOiIifQ==