(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{100:function(e,t,n){"use strict";n.d(t,"c",(function(){return c})),n.d(t,"a",(function(){return i})),n.d(t,"d",(function(){return s})),n.d(t,"b",(function(){return l}));var o=n(96);const a=Object(o.a)();let c=async()=>await fetch(`${a}/projects`).then(e=>e.json()).then(e=>e);const i=async e=>{const t=await fetch(`${a}/projects`,{method:"post",body:JSON.stringify(e),headers:{"Content-Type":"application/json"}}).then(e=>e.json()).then(e=>e);console.log(t)},s=async(e,t)=>{await fetch(`${a}/projects/${t}`,{method:"put",body:JSON.stringify(e),headers:{"Content-Type":"application/json"}}).then(e=>e.json()).then(e=>e)},l=async e=>{const t=await fetch(`${a}/projects/${e}`,{method:"delete",headers:{"Content-Type":"application/json"}}).then(e=>e.json()).then(e=>e);console.log(t)}},103:function(e,t,n){"use strict";n.r(t),n.d(t,"Projects",(function(){return h}));var o=n(0),a=n(97),c=n(98),i=n(4),s=n(100),l=n(3),d=n(106);n(107);const r=e=>{for(;e.childNodes.length;)e.removeChild(e.lastChild)};async function h(){const e=Object(o.e)(".scrollable-content");r(e),e.appendChild(Object(o.c)("div","loading")).innerHTML="loading...";const t=await Object(a.d)(),n=await Object(s.c)();r(e);const p=e.clientWidth;if(n.forEach(async(n,a)=>{const i=e.appendChild(Object(o.c)("div","project-wrap")),r=i.appendChild(Object(c.a)(`src/img/${n.img_url}`,n.name,!0,n.site_url,n.build_date));let u="false",f=Object(o.c)("div","link-modal"),j=Object(o.f)(".img-wrapper"),b=Object(o.f)(".inner-img-wrap"),g=Object(o.c)("div","tech-icons");n.technologies.forEach(e=>{g.appendChild(Object(o.c)("img","tech-icon")).src=`src/img/${e.icon_url}`});let m=Object(o.c)("div","description");if(m.innerHTML=n.description,p<900?(f.appendChild(g),f.appendChild(m)):(f.appendChild(m),f.appendChild(g)),f.appendChild(Object(o.c)("div","link-modal-icons")).innerHTML=`<div><a href=${n.site_url} target='_blank'><i class="fas fa-home fa-fw"></i></a>\n    <p class='home-tool-tip'>website</p></div>\n\n    <div><a href=${n.github_url} target='_blank'><i class="fab fa-github"></i></a>\n    <p class='github-tool-tip'>github</p></div>`,j[a].addEventListener("click",async()=>{if(console.log("is it so"),"true"===u)u="false",b[a].classList.add("close-curtain"),b[a].classList.remove("open-curtain"),b[a].lastChild.remove(),j[a].lastChild.remove(),j[a].style.width="80%",j[a].style.padding="6%",j[a].style.margin="0",i.style.margin="0 10% 3% 10%",b[a].style.width="100%",i.classList.remove("project-wrap-click");else if("false"===u){console.log(u),u="true",b[a].classList.add("open-curtain"),b[a].classList.remove("close-curtain"),j[a].appendChild(f),p<900?(j[a].style.flexDirection="column",f.style.width="90%",g.style.width="80%",f.style.marginTop="5%",f.style.background="rgb(240, 253, 253)"):(j[a].style.width="90%",j[a].style.padding="2%",j[a].style.margin="0 auto",i.style.margin="0 1%",b[a].style.width="99%",b[a].style.height="99%"),p<900?(console.log("900-"),r.appendChild(g)):(console.log("900+"),b[a].appendChild(g)),console.log(r),j[a].style.setProperty("--animation","animate-img-wrapper 1.5s linear forwards"),i.classList.add("project-wrap-click")}}),t&&t.isAdmin){const e=Object(o.c)("div","edit-project-wrapper"),t=Object(l.a)("show-edit-button","submit","update");t.addEventListener("click",()=>{console.log(i.lastChild.className),"edit-project-form"!==i.lastChild.className?Object(d.EditProject)(i,n):i.lastChild.remove()}),e.appendChild(t);const a=Object(l.a)("delete-project","submit","delete");a.addEventListener("click",async()=>{let e=confirm(`Are you sure you want to delete ${n.name}?`);e&&await Object(s.b)(n.id),e&&await h()}),e.appendChild(a),i.appendChild(e)}}),t&&t.isAdmin){let t=Object(l.a)("show-add-form","submit","add project");t.addEventListener("click",()=>{console.log(e.lastChild.previousSibling.className),"show-add-form"===e.lastChild.previousSibling.className?Object(d.EditProject)(e,n[0],"addProject"):e.lastChild.remove()}),Object(o.b)(e,t)}e.appendChild(Object(i.a)())}},106:function(e,t,n){"use strict";n.r(t),n.d(t,"EditProject",(function(){return l}));var o=n(3),a=n(99),c=n(100),i=n(103),s=n(0);const l=async(e,t,n)=>{if(console.log("add",n),"addProject"===n)for(let e in t)t[e]="";let l={},d=e=>{console.log(e.target.name,e.target.value),l[e.target.name]=e.target.value,console.log("cmon",l)},r=Object(o.c)("edit-project-form"),h=Object(s.c)("div","edit-form-inputs");r.appendChild(h),Object.keys(t).forEach(e=>{if("id"!==e&&"technologies"!==e&&"created_at"!==e&&"updated_at"!==e){l[e]=t[e];const a=Object(o.d)({className:"edit-form-input",name:e,type:"text",value:"addProject"===n?"":l[e],placeholder:e,handleChange:d});h.appendChild(a)}});const p=Object(s.c)("div","edit-form-checkboxes");r.appendChild(p),(await Object(a.c)()).map(e=>{let a;void 0===n&&t.technologies.forEach(t=>{e.name===t.name&&(console.log(e.name,t.name),a="checked")});let c=Object(o.b)({className:"edit-project-chkbox",name:e.name,id:e.name,value:e.id,checked:"addProject"===n?"":a});p.appendChild(c),p.appendChild(Object(o.e)("tech-box-label",e.name,"tech-box"))}),r.appendChild(Object(o.a)("edit-project-button","submit","addProject"===n?"add new project":"submit")),Object(s.b)(e,r),r.addEventListener("submit",async e=>{e.preventDefault(),console.log("add",n);const o=document.querySelectorAll("input[type=checkbox]:checked");console.log(o,l),l.technologies=[],o.forEach(e=>{l.technologies.push(e.value)}),console.log("add",l),"addProject"===n?await Object(c.a)(l):await Object(c.d)(l,t.id),await Object(i.Projects)()})}},107:function(e,t,n){var o=n(1),a=n(108);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.i,a,""]]);var c={insert:"head",singleton:!1},i=(o(a,c),a.locals?a.locals:{});e.exports=i},108:function(e,t,n){},96:function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));const o=()=>"https://portfolio-mick-server.herokuapp.com"},97:function(e,t,n){"use strict";n.d(t,"c",(function(){return c})),n.d(t,"a",(function(){return i})),n.d(t,"d",(function(){return s})),n.d(t,"b",(function(){return l}));var o=n(96);const a=Object(o.a)();const c=async e=>(console.log(JSON.stringify(e)),await fetch(a+"/users",{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}).then(e=>e.json()).then(e=>(localStorage.setItem("authToken",e.token),e))),i=async e=>{console.log(e);let t=await fetch(a+"/auth/login",{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}).then(e=>e.json()).then(e=>(localStorage.setItem("authToken",e.token),e));return console.log(t),t},s=async()=>{if(localStorage.getItem("authToken")){return await fetch(a+"/auth/verify",{method:"get",headers:(e={"Content-Type":"application/json"},localStorage.authToken?{...e,Authorization:`Bearer ${localStorage.authToken}`}:e)}).then(e=>e.json()).then(e=>e)}var e;return!1},l=async()=>(localStorage.removeItem("authToken"),{"Content-Type":"application/json"},"logged out")},99:function(e,t,n){"use strict";n.d(t,"c",(function(){return c})),n.d(t,"a",(function(){return i})),n.d(t,"d",(function(){return s})),n.d(t,"b",(function(){return l}));var o=n(96);const a=Object(o.a)();let c=async()=>await fetch(`${a}/technologies`).then(e=>e.json()).then(e=>e),i=async e=>await fetch(`${a}/technologies`,{method:"post",body:JSON.stringify(e),headers:{"Content-Type":"application/json"}}).then(e=>e.json()).then(e=>e);const s=async(e,t)=>{await fetch(`${a}/technologies/${t}`,{method:"put",body:JSON.stringify(e),headers:{"Content-Type":"application/json"}}).then(e=>e.json()).then(e=>e)},l=async e=>{await fetch(`${a}/technologies/${e}`,{method:"delete",headers:{"Content-Type":"application/json"}}).then(e=>e).then(e=>e)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,