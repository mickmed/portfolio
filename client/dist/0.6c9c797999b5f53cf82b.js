(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{82:function(e,t,c){"use strict";c.d(t,"a",(function(){return a}));var n=c(0);c(83);const a=(e,t,c,a)=>{let i=Object(n.c)("div","project-img"),o=Object(n.c)("div","img-wrapper");i.appendChild(o);let d=Object(n.c)("div","inner-img-wrap");if(o.appendChild(d),d.appendChild(Object(n.c)("img","img")).src=e,!0===c){let e=d.appendChild(Object(n.c)("div","modal"));e.classList.add("project-modal","modal-slide");e.appendChild(Object(n.c)("span","modal-span")),e.childNodes[0].appendChild(Object(n.c)("h2","project-title"));e.childNodes[0].childNodes[0].innerText=t}return i}},83:function(e,t,c){var n=c(1),a=c(84);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.i,a,""]]);var i={insert:"head",singleton:!1},o=(n(a,i),a.locals?a.locals:{});e.exports=o},84:function(e,t,c){},87:function(e,t,c){"use strict";c.d(t,"a",(function(){return i}));var n=c(5);const a=Object(n.a)();let i=async e=>await fetch(`${a}/technologies`).then(e=>e.json()).then(e=>e)},88:function(e,t,c){"use strict";c.d(t,"c",(function(){return i})),c.d(t,"a",(function(){return o})),c.d(t,"d",(function(){return d})),c.d(t,"b",(function(){return l}));var n=c(5);const a=Object(n.a)();let i=async()=>await fetch(`${a}/projects`).then(e=>e.json()).then(e=>e);const o=async e=>{console.log("ere"),console.log(JSON.stringify(e));const t=await fetch(`${a}/projects`,{method:"post",body:JSON.stringify(e),headers:{"Content-Type":"application/json"}}).then(e=>e.json()).then(e=>e);console.log(t)},d=async(e,t)=>{console.log(JSON.stringify(e));await fetch(`${a}/projects/${t}`,{method:"put",body:JSON.stringify(e),headers:{"Content-Type":"application/json"}}).then(e=>e.json()).then(e=>e)},l=async e=>{const t=await fetch(`${a}/projects/${e}`,{method:"delete",headers:{"Content-Type":"application/json"}}).then(e=>e.json()).then(e=>e);console.log(t)}},91:function(e,t,c){"use strict";c.r(t),c.d(t,"Projects",(function(){return p}));var n=c(0),a=c(7),i=(c(87),c(82)),o=c(3),d=c(88),l=c(4),s=c(92);c(93);const r=e=>{for(;e.childNodes.length;)e.removeChild(e.lastChild)};async function p(){let e=Object(n.e)(".main-content-scrollable");r(e),e.appendChild(Object(n.c)("div","loading")).innerHTML="loading...";const t=await Object(d.c)();r(e);const c=e.clientWidth;if(t.forEach(async(t,o)=>{let r=e.appendChild(Object(n.c)("div","project-wrap")),h=r.appendChild(Object(i.a)(`src/img/${t.img_url}`,t.name,!0,t.site_url));console.log(h);let j="false",u=Object(n.c)("div","link-modal"),b=Object(n.f)(".img-wrapper"),m=Object(n.f)(".inner-img-wrap"),f=Object(n.c)("div","tech-icons");t.technologies.forEach(e=>{f.appendChild(Object(n.c)("img","tech-icon")).src=`src/img/${e.icon_url}`});let g=Object(n.c)("div","description");if(g.innerHTML=t.description,c<900?(u.appendChild(f),u.appendChild(g)):(u.appendChild(g),u.appendChild(f)),u.appendChild(Object(n.c)("div","link-modal-icons")).innerHTML=`<div><a href=${t.site_url} target='_blank'><i class="fas fa-home fa-fw"></i></a>\n    <p class='home-tool-tip'>website</p></div>\n\n    <div><a href=${t.github_url} target='_blank'><i class="fab fa-github"></i></a>\n    <p class='github-tool-tip'>github</p></div>`,console.log(m[0].children[1]),b[o].addEventListener("click",async()=>{if("true"===j)j="false",m[o].classList.add("close-curtain"),m[o].classList.remove("open-curtain"),b[o].lastChild.remove(),b[o].style.width="80%",b[o].style.padding="6%",b[o].style.margin="0",r.style.margin="0 10% 3% 10%",m[o].style.width="100%",r.classList.remove("project-wrap-click"),h.lastChild.remove();else if("false"===j){j="true",m[o].classList.add("open-curtain"),m[o].classList.remove("close-curtain"),b[o].appendChild(u),c<900?(b[o].style.flexDirection="column",u.style.width="90%",f.style.width="80%",u.style.marginTop="5%",u.style.background="rgb(240, 253, 253)"):(b[o].style.width="90%",b[o].style.padding="2%",b[o].style.margin="0 auto",r.style.margin="0 1%",m[o].style.width="99%",m[o].style.height="99%"),h.appendChild(f),console.log(h),b[o].style.setProperty("--animation","animate-img-wrapper 1.5s linear forwards"),r.classList.add("project-wrap-click")}}),await Object(a.d)()){const e=Object(n.c)("div","edit-project-wrapper"),c=Object(l.a)("show-edit-button","submit","update");c.addEventListener("click",()=>{console.log(r.lastChild.className),"edit-project-form"!==r.lastChild.className?Object(s.EditProject)(r,t):r.lastChild.remove()}),e.appendChild(c);const a=Object(l.a)("delete-project","submit","delete");a.addEventListener("click",async()=>{let e=confirm(`Are you sure you want to delete ${t.name}?`);e&&await Object(d.b)(t.id),e&&await p()}),e.appendChild(a),r.appendChild(e)}}),await Object(a.d)()){let c=Object(l.a)("show-add-form","submit","add project");c.addEventListener("click",()=>{console.log(e.lastChild.className),"show-add-form"===e.lastChild.className?Object(s.EditProject)(e,t[0],"addProject"):e.lastChild.remove()}),Object(n.b)(e,c)}e.appendChild(Object(o.a)())}},92:function(e,t,c){"use strict";c.r(t),c.d(t,"EditProject",(function(){return l}));var n=c(4),a=c(87),i=c(88),o=c(91),d=c(0);const l=async(e,t,c)=>{if(console.log("add",c),"addProject"===c)for(let e in t)t[e]="";let l={},s=e=>{l[e.target.name]=e.target.value},r=Object(n.c)("edit-project-form"),p=Object(d.c)("div","edit-form-inputs");r.appendChild(p),Object.keys(t).forEach(e=>{if("id"!==e&&"technologies"!==e&&"created_at"!==e&&"updated_at"!==e){l[e]=t[e];const a=Object(n.d)({className:"edit-form-input",name:e,type:"text",value:"addProject"===c?"":l[e],placeholder:e,handleChange:s});p.appendChild(a)}});const h=Object(d.c)("div","edit-form-checkboxes");r.appendChild(h),(await Object(a.a)()).map(e=>{let a;void 0===c&&t.technologies.forEach(t=>{e.name===t.name&&(console.log(e.name,t.name),a="checked")});let i=Object(n.b)({className:"edit-project-chkbox",name:e.name,id:e.name,value:e.id,checked:"addProject"===c?"":a});h.appendChild(i),h.appendChild(Object(n.e)("tech-box-label",e.name,"tech-box"))}),r.appendChild(Object(n.a)("edit-project-button","submit","addProject"===c?"add new project":"submit")),Object(d.b)(e,r),r.addEventListener("submit",async e=>{e.preventDefault(),console.log("add",c);const n=document.querySelectorAll("input[type=checkbox]:checked");console.log(n),l.technologies=[],n.forEach(e=>{l.technologies.push(e.value)}),console.log("add",l),"addProject"===c?await Object(i.a)(l):await Object(i.d)(l,t.id),await Object(o.Projects)()})}},93:function(e,t,c){var n=c(1),a=c(94);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.i,a,""]]);var i={insert:"head",singleton:!1},o=(n(a,i),a.locals?a.locals:{});e.exports=o},94:function(e,t,c){}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,