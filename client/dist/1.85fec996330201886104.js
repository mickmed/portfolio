(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{83:function(e,t,a){"use strict";a.d(t,"a",(function(){return i}));var c=a(4);const n=Object(c.a)();let i=async e=>await fetch(`${n}/technologies`).then(e=>e.json()).then(e=>e)},84:function(e,t,a){"use strict";a.d(t,"c",(function(){return i})),a.d(t,"a",(function(){return o})),a.d(t,"d",(function(){return s})),a.d(t,"b",(function(){return l}));var c=a(4);const n=Object(c.a)();let i=async()=>await fetch(`${n}/projects`).then(e=>e.json()).then(e=>e);const o=async e=>{console.log("ere"),console.log(JSON.stringify(e));const t=await fetch(`${n}/projects`,{method:"post",body:JSON.stringify(e),headers:{"Content-Type":"application/json"}}).then(e=>e.json()).then(e=>e);console.log(t)},s=async(e,t)=>{console.log(JSON.stringify(e));await fetch(`${n}/projects/${t}`,{method:"put",body:JSON.stringify(e),headers:{"Content-Type":"application/json"}}).then(e=>e.json()).then(e=>e)},l=async e=>{const t=await fetch(`${n}/projects/${e}`,{method:"delete",headers:{"Content-Type":"application/json"}}).then(e=>e.json()).then(e=>e);console.log(t)}},87:function(e,t,a){"use strict";a.r(t),a.d(t,"Projects",(function(){return p}));var c=a(0),n=a(7),i=(a(83),a(82)),o=a(3),s=a(84),l=a(5),d=a(90);a(91);const r=e=>{for(;e.childNodes.length;)e.removeChild(e.lastChild)};async function p(){let e=Object(c.e)(".main-content-scrollable");r(e),e.appendChild(Object(c.c)("div","loading")).innerHTML="loading...";const t=await Object(s.c)();r(e);const a=e.clientWidth;if(t.forEach(async(t,o)=>{let r=e.appendChild(Object(c.c)("div","project-wrap")),h=r.appendChild(Object(i.a)(`src/img/${t.img_url}`,t.name,!0,t.site_url));console.log(h);let b="false",j=Object(c.c)("div","link-modal"),u=Object(c.f)(".img-wrapper"),m=Object(c.f)(".inner-img-wrap"),f=Object(c.c)("div","tech-icons");t.technologies.forEach(e=>{f.appendChild(Object(c.c)("img","tech-icon")).src=`src/img/${e.icon_url}`});let g=Object(c.c)("div","description");if(g.innerHTML=t.description,a<900?(j.appendChild(f),j.appendChild(g)):(j.appendChild(g),j.appendChild(f)),j.appendChild(Object(c.c)("div","link-modal-icons")).innerHTML=`<div><a href=${t.site_url} target='_blank'><i class="fas fa-home fa-fw"></i></a>\n    <p class='home-tool-tip'>website</p></div>\n\n    <div><a href=${t.github_url} target='_blank'><i class="fab fa-github"></i></a>\n    <p class='github-tool-tip'>github</p></div>`,console.log(m[0].children[1]),u[o].addEventListener("click",async()=>{if("true"===b)b="false",m[o].classList.add("close-curtain"),m[o].classList.remove("open-curtain"),u[o].lastChild.remove(),u[o].style.width="80%",u[o].style.padding="6%",u[o].style.margin="0",r.style.margin="0 10% 3% 10%",m[o].style.width="100%",r.classList.remove("project-wrap-click"),h.lastChild.remove();else if("false"===b){b="true",m[o].classList.add("open-curtain"),m[o].classList.remove("close-curtain"),u[o].appendChild(j),a<900?(u[o].style.flexDirection="column",j.style.width="90%",f.style.width="80%",j.style.marginTop="5%",j.style.background="rgb(240, 253, 253)"):(u[o].style.width="90%",u[o].style.padding="2%",u[o].style.margin="0 auto",r.style.margin="0 1%",m[o].style.width="99%",m[o].style.height="99%"),h.appendChild(f),console.log(h),u[o].style.setProperty("--animation","animate-img-wrapper 1.5s linear forwards"),r.classList.add("project-wrap-click")}}),await Object(n.d)()){const e=Object(c.c)("div","edit-project-wrapper"),a=Object(l.a)("show-edit-button","submit","update");a.addEventListener("click",()=>{console.log(r.lastChild.className),"edit-project-form"!==r.lastChild.className?Object(d.EditProject)(r,t):r.lastChild.remove()}),e.appendChild(a);const n=Object(l.a)("delete-project","submit","delete");n.addEventListener("click",async()=>{let e=confirm(`Are you sure you want to delete ${t.name}?`);e&&await Object(s.b)(t.id),e&&await p()}),e.appendChild(n),r.appendChild(e)}}),await Object(n.d)()){let a=Object(l.a)("show-add-form","submit","add project");a.addEventListener("click",()=>{console.log(e.lastChild.className),"show-add-form"===e.lastChild.className?Object(d.EditProject)(e,t[0],"addProject"):e.lastChild.remove()}),Object(c.b)(e,a)}e.appendChild(Object(o.a)())}},90:function(e,t,a){"use strict";a.r(t),a.d(t,"EditProject",(function(){return l}));var c=a(5),n=a(83),i=a(84),o=a(87),s=a(0);const l=async(e,t,a)=>{if(console.log("add",a),"addProject"===a)for(let e in t)t[e]="";let l={},d=e=>{console.log(e.target.name),l[e.target.name]=e.target.value},r=Object(c.c)("edit-project-form"),p=Object(s.c)("div","edit-form-inputs");r.appendChild(p),Object.keys(t).forEach(e=>{if("id"!==e&&"technologies"!==e&&"created_at"!==e&&"updated_at"!==e){l[e]=t[e];const n=Object(c.d)({className:"edit-form-input",name:e,type:"text",value:"addProject"===a?"":l[e],placeholder:e,handleChange:d});p.appendChild(n)}});const h=Object(s.c)("div","edit-form-checkboxes");r.appendChild(h),(await Object(n.a)()).map(e=>{let n;void 0===a&&t.technologies.forEach(t=>{e.name===t.name&&(console.log(e.name,t.name),n="checked")});let i=Object(c.b)({className:"edit-project-chkbox",name:e.name,id:e.name,value:e.id,checked:"addProject"===a?"":n});h.appendChild(i),h.appendChild(Object(c.e)("tech-box-label",e.name,"tech-box"))}),r.appendChild(Object(c.a)("edit-project-button","submit","addProject"===a?"add new project":"submit")),Object(s.b)(e,r),r.addEventListener("submit",async e=>{e.preventDefault(),console.log("add",a);const c=document.querySelectorAll("input[type=checkbox]:checked");console.log(c),l.technologies=[],c.forEach(e=>{l.technologies.push(e.value)}),console.log("add",l),"addProject"===a?await Object(i.a)(l):await Object(i.d)(l,t.id),await Object(o.Projects)()})}},91:function(e,t,a){var c=a(1),n=a(92);"string"==typeof(n=n.__esModule?n.default:n)&&(n=[[e.i,n,""]]);var i={insert:"head",singleton:!1},o=(c(n,i),n.locals?n.locals:{});e.exports=o},92:function(e,t,a){}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,