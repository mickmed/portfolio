(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{104:function(e,n,t){"use strict";t.r(n),t.d(n,"Lessons",(function(){return s}));var o=t(0),i=t(3);t(97);async function s(){const e=await Object(o.e)(".main-content-scrollable");for(console.log(e);e.childNodes.length;)e.removeChild(e.lastChild);const n=e.clientWidth;let t,s;console.log(n),n>600&&n<900?(t=480,s=299):n>900&&n<1200?(t=960,s=569):n>1200&&(t=1440,s=839);const d=Object(o.c)("div","linked-lists");d.innerHTML="<div><h3>Linked Lists</h3>\n    <p>Slide 1) The unshift method adds a new node to the beginning of the linked list. We can see that as each new node is created <i>this.next</i> points to the following node.</p>\n    <p>Slide 2) The push method adds a new node to the end of the linked list. The <i>this.next</i> property of the previous node points to our new node.</p>\n    <p>Slide 3) The insertAt method adds a new node to the specified position in the list. The <i>this.next</i> property of the previous node points to our new node.</p>\n    \n    \n  \n    </div>";const l=Object(o.c)("div","doc-wrapper"),h=Object(o.c)("iframe","slides");h.src="https://docs.google.com/presentation/d/e/2PACX-1vTDsnjcpJ49de8trQkESBQbLFeeqywV_VJB_mgb5l1oqsaLTs5Rp8rS-XbDhjFeJDpqrNuZ34GGCabs/embed?start=false&loop=false&delayms=3000",h.frameborder="0",h.allowfullscreen="true",h.mozallowfullscreen="true",h.webkitallowfullscreen="true",l.appendChild(h);const p=Object(o.c)("div","linked-lists");p.innerHTML="\n    <p>Slide 4) The unshift method adds a new node to the beginning of the linked list. We can see that as each new node is created <i>this.next</i> points to the following node.</p>\n    <p>Slide 5) The push method adds a new node to the end of the linked list. The <i>this.next</i> property of the previous node points to our new node.</p>\n    <p>Slide 6) The insertAt method adds a new node to the specified position in the list. The <i>this.next</i> property of the previous node points to our new node.</p>\n    \n    \n    </div>",e.appendChild(d),e.appendChild(l),e.appendChild(p),e.appendChild(Object(i.a)())}},97:function(e,n,t){var o=t(1),i=t(98);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var s={insert:"head",singleton:!1},d=(o(i,s),i.locals?i.locals:{});e.exports=d},98:function(e,n,t){}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQ29tcG9uZW50cy9MZXNzb25zL0xlc3NvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbXBvbmVudHMvTGVzc29ucy9MZXNzc29ucy5zY3NzPzY0NDkiXSwibmFtZXMiOlsiYXN5bmMiLCJMZXNzb25zIiwibWFpbkNvbnRlbnRTY3JvbGxhYmxlIiwiY29uc29sZSIsImxvZyIsImNoaWxkTm9kZXMiLCJsZW5ndGgiLCJyZW1vdmVDaGlsZCIsImxhc3RDaGlsZCIsIndpZHRoIiwiY2xpZW50V2lkdGgiLCJmcmFtZVdpZHRoIiwiZnJhbWVIZWlnaHQiLCJsaW5rTGlzdCIsImlubmVySFRNTCIsImRvY1dyYXBwZXIiLCJkb2MiLCJzcmMiLCJmcmFtZWJvcmRlciIsImFsbG93ZnVsbHNjcmVlbiIsIm1vemFsbG93ZnVsbHNjcmVlbiIsIndlYmtpdGFsbG93ZnVsbHNjcmVlbiIsImFwcGVuZENoaWxkIiwibGlua0xpc3QyIiwiYXBpIiwiY29udGVudCIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwibW9kdWxlIiwiaSIsIm9wdGlvbnMiLCJleHBvcnRlZCIsImxvY2FscyIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJpS0FNT0EsZUFBZUMsSUFHbEIsTUFBTUMsUUFBOEIsWUFBRyw0QkFFdkMsSUFEQUMsUUFBUUMsSUFBSUYsR0FDTEEsRUFBc0JHLFdBQVdDLFFBQ3BDSixFQUFzQkssWUFBWUwsRUFBc0JNLFdBRzVELE1BQU1DLEVBQVFQLEVBQXNCUSxZQUVwQyxJQUFJQyxFQUFZQyxFQURoQlQsUUFBUUMsSUFBSUssR0FFUkEsRUFBUSxLQUFPQSxFQUFRLEtBQ3ZCRSxFQUFhLElBQ2JDLEVBQWMsS0FFUEgsRUFBUSxLQUFPQSxFQUFRLE1BQzlCRSxFQUFhLElBQ2JDLEVBQWMsS0FHUEgsRUFBUSxPQUNmRSxFQUFhLEtBQ2JDLEVBQWMsS0FHbEIsTUFBTUMsRUFBVyxZQUFLLE1BQU8sZ0JBQzdCQSxFQUFTQyxVQUNMLDJqQkFTSixNQUFNQyxFQUFhLFlBQUssTUFBTyxlQUN6QkMsRUFBTSxZQUFLLFNBQVUsVUFDM0JBLEVBQUlDLElBQU0sNEtBQ1ZELEVBQUlFLFlBQWMsSUFDbEJGLEVBQUlHLGdCQUFrQixPQUN0QkgsRUFBSUksbUJBQXFCLE9BQ3pCSixFQUFJSyxzQkFBd0IsT0FFNUJOLEVBQVdPLFlBQVlOLEdBRXZCLE1BQU1PLEVBQVksWUFBSyxNQUFPLGdCQUM5QkEsRUFBVVQsVUFDTiw2aEJBUUpaLEVBQXNCb0IsWUFBWVQsR0FDbENYLEVBQXNCb0IsWUFBWVAsR0FDbENiLEVBQXNCb0IsWUFBWUMsR0FDbENyQixFQUFzQm9CLFlBQVksaUIsbUJDbEV0QyxJQUFJRSxFQUFNLEVBQVEsR0FDRkMsRUFBVSxFQUFRLElBSUMsaUJBRnZCQSxFQUFVQSxFQUFRQyxXQUFhRCxFQUFRRSxRQUFVRixLQUcvQ0EsRUFBVSxDQUFDLENBQUNHLEVBQU9DLEVBQUlKLEVBQVMsTUFHOUMsSUFBSUssRUFBVSxDQUVkLE9BQWlCLE9BQ2pCLFdBQW9CLEdBSWhCQyxHQUZTUCxFQUFJQyxFQUFTSyxHQUVYTCxFQUFRTyxPQUFTUCxFQUFRTyxPQUFTLElBSWpESixFQUFPSyxRQUFVRixHIiwiZmlsZSI6IjUuYTk0ZmMwMWFiNmUwNzk3ZTFiMWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IGNlY2wsIHFzIH0gZnJvbSAnLi4vSGVscGVycy9kb21IZWxwZXInXG5pbXBvcnQgeyBGb290ZXIgfSBmcm9tICcuLi9Gb290ZXIvRm9vdGVyLmpzJ1xuaW1wb3J0ICcuL0xlc3Nzb25zLnNjc3MnXG5cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIExlc3NvbnMoKSB7XG5cblxuICAgIGNvbnN0IG1haW5Db250ZW50U2Nyb2xsYWJsZSA9IGF3YWl0IHFzKFwiLm1haW4tY29udGVudC1zY3JvbGxhYmxlXCIpO1xuICAgIGNvbnNvbGUubG9nKG1haW5Db250ZW50U2Nyb2xsYWJsZSlcbiAgICB3aGlsZSAobWFpbkNvbnRlbnRTY3JvbGxhYmxlLmNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICAgIG1haW5Db250ZW50U2Nyb2xsYWJsZS5yZW1vdmVDaGlsZChtYWluQ29udGVudFNjcm9sbGFibGUubGFzdENoaWxkKVxuICAgIH1cblxuICAgIGNvbnN0IHdpZHRoID0gbWFpbkNvbnRlbnRTY3JvbGxhYmxlLmNsaWVudFdpZHRoXG4gICAgY29uc29sZS5sb2cod2lkdGgpXG4gICAgbGV0IGZyYW1lV2lkdGgsIGZyYW1lSGVpZ2h0XG4gICAgaWYgKHdpZHRoID4gNjAwICYmIHdpZHRoIDwgOTAwKSB7XG4gICAgICAgIGZyYW1lV2lkdGggPSA0ODBcbiAgICAgICAgZnJhbWVIZWlnaHQgPSAyOTlcblxuICAgIH0gZWxzZSBpZiAod2lkdGggPiA5MDAgJiYgd2lkdGggPCAxMjAwKSB7XG4gICAgICAgIGZyYW1lV2lkdGggPSA5NjBcbiAgICAgICAgZnJhbWVIZWlnaHQgPSA1NjlcblxuXG4gICAgfSBlbHNlIGlmICh3aWR0aCA+IDEyMDApIHtcbiAgICAgICAgZnJhbWVXaWR0aCA9IDE0NDBcbiAgICAgICAgZnJhbWVIZWlnaHQgPSA4MzlcbiAgICB9XG5cbiAgICBjb25zdCBsaW5rTGlzdCA9IGNlY2woJ2RpdicsICdsaW5rZWQtbGlzdHMnKVxuICAgIGxpbmtMaXN0LmlubmVySFRNTCA9XG4gICAgICAgIGA8ZGl2PjxoMz5MaW5rZWQgTGlzdHM8L2gzPlxuICAgIDxwPlNsaWRlIDEpIFRoZSB1bnNoaWZ0IG1ldGhvZCBhZGRzIGEgbmV3IG5vZGUgdG8gdGhlIGJlZ2lubmluZyBvZiB0aGUgbGlua2VkIGxpc3QuIFdlIGNhbiBzZWUgdGhhdCBhcyBlYWNoIG5ldyBub2RlIGlzIGNyZWF0ZWQgPGk+dGhpcy5uZXh0PC9pPiBwb2ludHMgdG8gdGhlIGZvbGxvd2luZyBub2RlLjwvcD5cbiAgICA8cD5TbGlkZSAyKSBUaGUgcHVzaCBtZXRob2QgYWRkcyBhIG5ldyBub2RlIHRvIHRoZSBlbmQgb2YgdGhlIGxpbmtlZCBsaXN0LiBUaGUgPGk+dGhpcy5uZXh0PC9pPiBwcm9wZXJ0eSBvZiB0aGUgcHJldmlvdXMgbm9kZSBwb2ludHMgdG8gb3VyIG5ldyBub2RlLjwvcD5cbiAgICA8cD5TbGlkZSAzKSBUaGUgaW5zZXJ0QXQgbWV0aG9kIGFkZHMgYSBuZXcgbm9kZSB0byB0aGUgc3BlY2lmaWVkIHBvc2l0aW9uIGluIHRoZSBsaXN0LiBUaGUgPGk+dGhpcy5uZXh0PC9pPiBwcm9wZXJ0eSBvZiB0aGUgcHJldmlvdXMgbm9kZSBwb2ludHMgdG8gb3VyIG5ldyBub2RlLjwvcD5cbiAgICBcbiAgICBcbiAgXG4gICAgPC9kaXY+YFxuXG4gICAgY29uc3QgZG9jV3JhcHBlciA9IGNlY2woJ2RpdicsICdkb2Mtd3JhcHBlcicpXG4gICAgY29uc3QgZG9jID0gY2VjbCgnaWZyYW1lJywgJ3NsaWRlcycpXG4gICAgZG9jLnNyYyA9IGBodHRwczovL2RvY3MuZ29vZ2xlLmNvbS9wcmVzZW50YXRpb24vZC9lLzJQQUNYLTF2VERzbmpjcEo0OWRlOHRyUWtFU0JRYkxGZWVxeXdWX1ZKQl9tZ2I1bDFvcXNhTFRzNVJwOHJTLVhiRGhqRmVKRHBxck51WjM0R0dDYWJzL2VtYmVkP3N0YXJ0PWZhbHNlJmxvb3A9ZmFsc2UmZGVsYXltcz0zMDAwYFxuICAgIGRvYy5mcmFtZWJvcmRlciA9IFwiMFwiXG4gICAgZG9jLmFsbG93ZnVsbHNjcmVlbiA9IFwidHJ1ZVwiXG4gICAgZG9jLm1vemFsbG93ZnVsbHNjcmVlbiA9IFwidHJ1ZVwiXG4gICAgZG9jLndlYmtpdGFsbG93ZnVsbHNjcmVlbiA9IFwidHJ1ZVwiXG5cbiAgICBkb2NXcmFwcGVyLmFwcGVuZENoaWxkKGRvYylcblxuICAgIGNvbnN0IGxpbmtMaXN0MiA9IGNlY2woJ2RpdicsICdsaW5rZWQtbGlzdHMnKVxuICAgIGxpbmtMaXN0Mi5pbm5lckhUTUwgPVxuICAgICAgICBgXG4gICAgPHA+U2xpZGUgNCkgVGhlIHVuc2hpZnQgbWV0aG9kIGFkZHMgYSBuZXcgbm9kZSB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBsaW5rZWQgbGlzdC4gV2UgY2FuIHNlZSB0aGF0IGFzIGVhY2ggbmV3IG5vZGUgaXMgY3JlYXRlZCA8aT50aGlzLm5leHQ8L2k+IHBvaW50cyB0byB0aGUgZm9sbG93aW5nIG5vZGUuPC9wPlxuICAgIDxwPlNsaWRlIDUpIFRoZSBwdXNoIG1ldGhvZCBhZGRzIGEgbmV3IG5vZGUgdG8gdGhlIGVuZCBvZiB0aGUgbGlua2VkIGxpc3QuIFRoZSA8aT50aGlzLm5leHQ8L2k+IHByb3BlcnR5IG9mIHRoZSBwcmV2aW91cyBub2RlIHBvaW50cyB0byBvdXIgbmV3IG5vZGUuPC9wPlxuICAgIDxwPlNsaWRlIDYpIFRoZSBpbnNlcnRBdCBtZXRob2QgYWRkcyBhIG5ldyBub2RlIHRvIHRoZSBzcGVjaWZpZWQgcG9zaXRpb24gaW4gdGhlIGxpc3QuIFRoZSA8aT50aGlzLm5leHQ8L2k+IHByb3BlcnR5IG9mIHRoZSBwcmV2aW91cyBub2RlIHBvaW50cyB0byBvdXIgbmV3IG5vZGUuPC9wPlxuICAgIFxuICAgIFxuICAgIDwvZGl2PmBcblxuICAgIG1haW5Db250ZW50U2Nyb2xsYWJsZS5hcHBlbmRDaGlsZChsaW5rTGlzdClcbiAgICBtYWluQ29udGVudFNjcm9sbGFibGUuYXBwZW5kQ2hpbGQoZG9jV3JhcHBlcilcbiAgICBtYWluQ29udGVudFNjcm9sbGFibGUuYXBwZW5kQ2hpbGQobGlua0xpc3QyKVxuICAgIG1haW5Db250ZW50U2Nyb2xsYWJsZS5hcHBlbmRDaGlsZChGb290ZXIoKSlcblxufSIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0xlc3Nzb25zLnNjc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cbnZhciBleHBvcnRlZCA9IGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB7fTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0ZWQ7Il0sInNvdXJjZVJvb3QiOiIifQ==