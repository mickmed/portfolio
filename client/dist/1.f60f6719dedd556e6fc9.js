(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{86:function(e,t,c){"use strict";c.d(t,"a",(function(){return a}));var n=c(4);const o=Object(n.a)();let a=async e=>await fetch(`${o}/technologies`).then(e=>e.json()).then(e=>e)},87:function(e,t,c){"use strict";c.d(t,"c",(function(){return a})),c.d(t,"a",(function(){return i})),c.d(t,"d",(function(){return l})),c.d(t,"b",(function(){return s}));var n=c(4);const o=Object(n.a)();let a=async()=>await fetch(`${o}/projects`).then(e=>e.json()).then(e=>e);const i=async e=>{console.log("ere"),console.log(JSON.stringify(e));const t=await fetch(`${o}/projects`,{method:"post",body:JSON.stringify(e),headers:{"Content-Type":"application/json"}}).then(e=>e.json()).then(e=>e);console.log(t)},l=async(e,t)=>{console.log(e);await fetch(`${o}/projects/${t}`,{method:"put",body:JSON.stringify(e),headers:{"Content-Type":"application/json"}}).then(e=>e.json()).then(e=>e)},s=async e=>{const t=await fetch(`${o}/projects/${e}`,{method:"delete",headers:{"Content-Type":"application/json"}}).then(e=>e.json()).then(e=>e);console.log(t)}},90:function(e,t,c){"use strict";c.r(t),c.d(t,"Projects",(function(){return p}));var n=c(0),o=c(7),a=(c(86),c(85)),i=c(3),l=c(87),s=c(5),d=c(93);c(94);const r=e=>{for(;e.childNodes.length;)e.removeChild(e.lastChild)};async function p(){const e=Object(n.e)(".scrollable-content");r(e),e.appendChild(Object(n.c)("div","loading")).innerHTML="loading...";const t=await Object(l.c)();r(e);const c=e.clientWidth;if(t.forEach(async(t,i)=>{const r=e.appendChild(Object(n.c)("div","project-wrap")),h=r.appendChild(Object(a.a)(`src/img/${t.img_url}`,t.name,!0,t.site_url,t.build_date));console.log(h);let b="false",u=Object(n.c)("div","link-modal"),j=Object(n.f)(".img-wrapper"),m=Object(n.f)(".inner-img-wrap"),g=Object(n.c)("div","tech-icons");t.technologies.forEach(e=>{g.appendChild(Object(n.c)("img","tech-icon")).src=`src/img/${e.icon_url}`});let f=Object(n.c)("div","description");if(f.innerHTML=t.description,c<900?(u.appendChild(g),u.appendChild(f)):(u.appendChild(f),u.appendChild(g)),u.appendChild(Object(n.c)("div","link-modal-icons")).innerHTML=`<div><a href=${t.site_url} target='_blank'><i class="fas fa-home fa-fw"></i></a>\n    <p class='home-tool-tip'>website</p></div>\n\n    <div><a href=${t.github_url} target='_blank'><i class="fab fa-github"></i></a>\n    <p class='github-tool-tip'>github</p></div>`,console.log(m[0].children[1]),j[i].addEventListener("click",async()=>{if("true"===b)b="false",m[i].classList.add("close-curtain"),m[i].classList.remove("open-curtain"),j[i].lastChild.remove(),j[i].style.width="80%",j[i].style.padding="6%",j[i].style.margin="0",r.style.margin="0 10% 3% 10%",m[i].style.width="100%",r.classList.remove("project-wrap-click"),h.lastChild.remove();else if("false"===b){console.log(b),b="true",m[i].classList.add("open-curtain"),m[i].classList.remove("close-curtain"),j[i].appendChild(u),c<900?(j[i].style.flexDirection="column",u.style.width="90%",g.style.width="80%",u.style.marginTop="5%",u.style.background="rgb(240, 253, 253)"):(j[i].style.width="90%",j[i].style.padding="2%",j[i].style.margin="0 auto",r.style.margin="0 1%",m[i].style.width="99%",m[i].style.height="99%"),c<900?(console.log("900-"),h.appendChild(g)):(console.log("900+"),m[i].appendChild(g)),console.log(h),j[i].style.setProperty("--animation","animate-img-wrapper 1.5s linear forwards"),r.classList.add("project-wrap-click")}}),await Object(o.d)()){const e=Object(n.c)("div","edit-project-wrapper"),c=Object(s.a)("show-edit-button","submit","update");c.addEventListener("click",()=>{console.log(r.lastChild.className),"edit-project-form"!==r.lastChild.className?Object(d.EditProject)(r,t):r.lastChild.remove()}),e.appendChild(c);const o=Object(s.a)("delete-project","submit","delete");o.addEventListener("click",async()=>{let e=confirm(`Are you sure you want to delete ${t.name}?`);e&&await Object(l.b)(t.id),e&&await p()}),e.appendChild(o),r.appendChild(e)}}),await Object(o.d)()){console.log("not fair");let c=Object(s.a)("show-add-form","submit","add project");c.addEventListener("click",()=>{console.log(e.lastChild.previousSibling.className),"show-add-form"===e.lastChild.previousSibling.className?Object(d.EditProject)(e,t[0],"addProject"):e.lastChild.remove()}),Object(n.b)(e,c)}e.appendChild(Object(i.a)())}},93:function(e,t,c){"use strict";c.r(t),c.d(t,"EditProject",(function(){return s}));var n=c(5),o=c(86),a=c(87),i=c(90),l=c(0);const s=async(e,t,c)=>{if(console.log("add",c),"addProject"===c)for(let e in t)t[e]="";let s={},d=e=>{console.log(e.target.name,e.target.value),s[e.target.name]=e.target.value,console.log("cmon",s)},r=Object(n.c)("edit-project-form"),p=Object(l.c)("div","edit-form-inputs");r.appendChild(p),Object.keys(t).forEach(e=>{if("id"!==e&&"technologies"!==e&&"created_at"!==e&&"updated_at"!==e){s[e]=t[e];const o=Object(n.d)({className:"edit-form-input",name:e,type:"text",value:"addProject"===c?"":s[e],placeholder:e,handleChange:d});p.appendChild(o)}});const h=Object(l.c)("div","edit-form-checkboxes");r.appendChild(h),(await Object(o.a)()).map(e=>{let o;void 0===c&&t.technologies.forEach(t=>{e.name===t.name&&(console.log(e.name,t.name),o="checked")});let a=Object(n.b)({className:"edit-project-chkbox",name:e.name,id:e.name,value:e.id,checked:"addProject"===c?"":o});h.appendChild(a),h.appendChild(Object(n.e)("tech-box-label",e.name,"tech-box"))}),r.appendChild(Object(n.a)("edit-project-button","submit","addProject"===c?"add new project":"submit")),Object(l.b)(e,r),r.addEventListener("submit",async e=>{e.preventDefault(),console.log("add",c);const n=document.querySelectorAll("input[type=checkbox]:checked");console.log(n,s),s.technologies=[],n.forEach(e=>{s.technologies.push(e.value)}),console.log("add",s),"addProject"===c?await Object(a.a)(s):await Object(a.d)(s,t.id),await Object(i.Projects)()})}},94:function(e,t,c){var n=c(1),o=c(95);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var a={insert:"head",singleton:!1},i=(n(o,a),o.locals?o.locals:{});e.exports=i},95:function(e,t,c){}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQ29tcG9uZW50cy9TZXJ2aWNlcy9BcGlUZWNoLmpzIiwid2VicGFjazovLy8uL3NyYy9Db21wb25lbnRzL1NlcnZpY2VzL0FwaVByb2plY3QuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbXBvbmVudHMvUHJvamVjdHMvUHJvamVjdHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbXBvbmVudHMvUHJvamVjdHMvRWRpdFByb2plY3QuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbXBvbmVudHMvUHJvamVjdHMvcHJvamVjdHMuc2NzcyJdLCJuYW1lcyI6WyJiYXNlVXJsIiwiZ2V0VGVjaG5vbG9naWVzIiwiYXN5bmMiLCJ0eXBlIiwiZmV0Y2giLCJ0aGVuIiwicmVzIiwianNvbiIsImFucyIsImdldFByb2plY3RzIiwiYWRkUHJvamVjdCIsImJvZHkiLCJjb25zb2xlIiwibG9nIiwiSlNPTiIsInN0cmluZ2lmeSIsIm1ldGhvZCIsImhlYWRlcnMiLCJkYXRhIiwidXBkYXRlUHJvamVjdCIsImlkIiwiZGVsZXRlUHJvamVjdCIsImNsZWFyUGFnZSIsImVsZW1lbnQiLCJjaGlsZE5vZGVzIiwibGVuZ3RoIiwicmVtb3ZlQ2hpbGQiLCJsYXN0Q2hpbGQiLCJQcm9qZWN0cyIsIm1haW5Db250ZW50IiwiYXBwZW5kQ2hpbGQiLCJpbm5lckhUTUwiLCJyZXNwIiwiY29udGFpbmVyV2lkdGgiLCJjbGllbnRXaWR0aCIsImZvckVhY2giLCJwcm9qZWN0IiwiaW5kZXgiLCJwcm9qZWN0V3JhcCIsImltYWdlIiwiaW1nX3VybCIsIm5hbWUiLCJzaXRlX3VybCIsImJ1aWxkX2RhdGUiLCJib29sIiwibGlua01vZGFsIiwiaW1nV3JhcHBlciIsImlubmVySW1nV3JhcCIsInRlY2hJY29ucyIsInRlY2hub2xvZ2llcyIsImljb24iLCJzcmMiLCJpY29uX3VybCIsImRlc2NyaXB0aW9uIiwiZ2l0aHViX3VybCIsImNoaWxkcmVuIiwiYWRkRXZlbnRMaXN0ZW5lciIsImNsYXNzTGlzdCIsImFkZCIsInJlbW92ZSIsInN0eWxlIiwid2lkdGgiLCJwYWRkaW5nIiwibWFyZ2luIiwiZmxleERpcmVjdGlvbiIsIm1hcmdpblRvcCIsImJhY2tncm91bmQiLCJoZWlnaHQiLCJzZXRQcm9wZXJ0eSIsImVkaXRQcm9qZWN0V3JhcHBlciIsImVkaXRCdXR0b24iLCJjbGFzc05hbWUiLCJkZWxldGVCdXR0b24iLCJhbnN3ZXIiLCJjb25maXJtIiwiYWRkQnRuIiwicHJldmlvdXNTaWJsaW5nIiwiRWRpdFByb2plY3QiLCJpdGVtIiwibmV3UHJvamVjdCIsImhhbmRsZUNoYW5nZSIsImUiLCJ0YXJnZXQiLCJ2YWx1ZSIsImZvcm0iLCJpbnB1dHMiLCJPYmplY3QiLCJrZXlzIiwia2V5IiwiaW5wdXQiLCJwbGFjZWhvbGRlciIsImNoZWNrcyIsIm1hcCIsInRlY2hub2xvZ3kiLCJjaGVja2VkIiwidW5kZWZpbmVkIiwicHJvamVjdFRlY2hub2xvZ3kiLCJieCIsImV2dCIsInByZXZlbnREZWZhdWx0IiwiY2hlY2tib3hlcyIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsImJveCIsInB1c2giLCJhcGkiLCJjb250ZW50IiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJtb2R1bGUiLCJpIiwib3B0aW9ucyIsImV4cG9ydGVkIiwibG9jYWxzIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6InlGQUFBLDZDQUNBLE1BQU1BLEVBQVUsY0FLVCxJQUFJQyxFQUFrQkMsTUFBT0MsU0FDZEMsTUFBTSxHQUFHSixrQkFDMUJLLEtBQU1DLEdBRUVBLEVBQUlDLFFBRVpGLEtBQU1HLEdBQ0VBLEksZ0NDYmIsbUpBQ0EsTUFBTVIsRUFBVSxjQUdULElBQUlTLEVBQWNQLGVBQ0hFLE1BQU0sR0FBR0osY0FDMUJLLEtBQU1DLEdBRUVBLEVBQUlDLFFBRVpGLEtBQU1HLEdBQ0VBLEdBcUJOLE1BQU1FLEVBQWFSLE1BQU9TLElBQy9CQyxRQUFRQyxJQUFJLE9BQ1pELFFBQVFDLElBQUlD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RUFBT0MsRUFBSUosRUFBUyxNQUc5QyxJQUFJSyxFQUFVLENBRWQsT0FBaUIsT0FDakIsV0FBb0IsR0FJaEJDLEdBRlNQLEVBQUlDLEVBQVNLLEdBRVhMLEVBQVFPLE9BQVNQLEVBQVFPLE9BQVMsSUFJakRKLEVBQU9LLFFBQVVGLEciLCJmaWxlIjoiMS5mNjBmNjcxOWRlZGQ1NTZlNmZjOS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VVcmwgfSBmcm9tICcuL0Jhc2VVcmwuanMnXG5jb25zdCBiYXNlVXJsID0gQmFzZVVybCgpXG5cblxuXG5cbmV4cG9ydCBsZXQgZ2V0VGVjaG5vbG9naWVzID0gYXN5bmMgKHR5cGUpID0+IHtcbiAgbGV0IHJlc3VsdHMgPSBhd2FpdCBmZXRjaChgJHtiYXNlVXJsfS90ZWNobm9sb2dpZXNgKVxuICAgIC50aGVuKChyZXMpID0+IHtcblxuICAgICAgcmV0dXJuIHJlcy5qc29uKClcbiAgICB9KVxuICAgIC50aGVuKChhbnMpID0+IHtcbiAgICAgIHJldHVybiBhbnNcbiAgICB9KVxuXG4gIHJldHVybiB0eXBlLCByZXN1bHRzXG59IiwiaW1wb3J0IHsgQmFzZVVybCB9IGZyb20gJy4vQmFzZVVybC5qcydcbmNvbnN0IGJhc2VVcmwgPSBCYXNlVXJsKClcblxuXG5leHBvcnQgbGV0IGdldFByb2plY3RzID0gYXN5bmMgKCkgPT4ge1xuICBsZXQgcmVzdWx0cyA9IGF3YWl0IGZldGNoKGAke2Jhc2VVcmx9L3Byb2plY3RzYClcbiAgICAudGhlbigocmVzKSA9PiB7XG5cbiAgICAgIHJldHVybiByZXMuanNvbigpXG4gICAgfSlcbiAgICAudGhlbigoYW5zKSA9PiB7XG4gICAgICByZXR1cm4gYW5zXG4gICAgfSlcblxuICByZXR1cm4gcmVzdWx0c1xufVxuXG5leHBvcnQgbGV0IGdldFByb2plY3QgPSBhc3luYyAoaWQpID0+IHtcbiAgbGV0IHJlc3VsdCA9IGF3YWl0IGZldGNoKGAke2Jhc2VVcmx9L3Byb2plY3RzLyR7aWR9YClcbiAgICAudGhlbigocmVzKSA9PiB7XG5cbiAgICAgIHJldHVybiByZXMuanNvbigpXG4gICAgfSlcbiAgICAudGhlbigoYW5zKSA9PiB7XG4gICAgICByZXR1cm4gYW5zXG4gICAgfSlcblxuICByZXR1cm4gcmVzdWx0XG59XG5cblxuXG5leHBvcnQgY29uc3QgYWRkUHJvamVjdCA9IGFzeW5jIChib2R5KSA9PiB7XG4gIGNvbnNvbGUubG9nKCdlcmUnKVxuICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShib2R5KSlcbiAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goYCR7YmFzZVVybH0vcHJvamVjdHNgLCB7XG4gICAgbWV0aG9kOiBgcG9zdGAsXG4gICAgYm9keTogSlNPTi5zdHJpbmdpZnkoYm9keSksXG4gICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG4gIH0pXG4gICAgLnRoZW4oKGpzb24pID0+IHtcbiAgICAgIHJldHVybiBqc29uLmpzb24oKVxuICAgIH0pXG4gICAgLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgIHJldHVybiBkYXRhXG4gICAgfSlcbiAgY29uc29sZS5sb2cocmVzKVxufVxuXG5cbmV4cG9ydCBjb25zdCB1cGRhdGVQcm9qZWN0ID0gYXN5bmMgKGJvZHksIGlkKSA9PiB7XG4gIGNvbnNvbGUubG9nKChib2R5KSlcbiAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goYCR7YmFzZVVybH0vcHJvamVjdHMvJHtpZH1gLCB7XG4gICAgbWV0aG9kOiBgcHV0YCxcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeShib2R5KSxcbiAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcbiAgfSlcbiAgICAudGhlbigoanNvbikgPT4ge1xuICAgICAgcmV0dXJuIGpzb24uanNvbigpXG4gICAgfSlcbiAgICAudGhlbigoZGF0YSkgPT4ge1xuICAgICAgcmV0dXJuIGRhdGFcbiAgICB9KVxuXG59XG4vL1xuZXhwb3J0IGNvbnN0IGRlbGV0ZVByb2plY3QgPSBhc3luYyAoaWQpID0+IHtcblxuXG5cbiAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goYCR7YmFzZVVybH0vcHJvamVjdHMvJHtpZH1gLCB7XG4gICAgbWV0aG9kOiBgZGVsZXRlYCxcbiAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfVxuICB9KVxuICAgIC50aGVuKChqc29uKSA9PiB7XG4gICAgICByZXR1cm4ganNvbi5qc29uKClcbiAgICB9KVxuICAgIC50aGVuKChkYXRhKSA9PiB7XG4gICAgICByZXR1cm4gZGF0YVxuICAgIH0pXG4gIGNvbnNvbGUubG9nKHJlcylcbn1cblxuXG5leHBvcnQgY29uc3QgdXBkYXRlUHJvamVjdFRlY2hub2xvZ2llcyA9IGFzeW5jIChwcm9qZWN0X2lkLCBpZCkgPT4ge1xuICBjb25zb2xlLmxvZygndXB0JylcbiAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goYCR7YmFzZVVybH0vcHJvamVjdHMvJHtwcm9qZWN0X2lkfS90ZWNobm9sb2dpZXMvJHtpZH1gLCB7XG4gICAgbWV0aG9kOiBgcHV0YCxcbiAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfVxuICB9KVxuICAgIC50aGVuKChqc29uKSA9PiB7XG4gICAgICByZXR1cm4ganNvbi5qc29uKClcbiAgICB9KVxuICAgIC50aGVuKChkYXRhKSA9PiB7XG4gICAgICByZXR1cm4gZGF0YVxuICAgIH0pXG4gIGNvbnNvbGUubG9nKHJlcylcblxufSIsIi8vIGltcG9ydCBcIi4uL1NoYXJlZC9JbWFnZVwiXG5pbXBvcnQgeyBxcywgcXNhLCBjZWNsLCBhYywgYnRuIH0gZnJvbSBcIi4uL0hlbHBlcnMvZG9tSGVscGVyXCJcbmltcG9ydCB7IHZlcmlmeSB9IGZyb20gXCIuLi9TZXJ2aWNlcy9BcGlBdXRoLmpzXCJcbmltcG9ydCB7IGdldFRlY2hub2xvZ2llcyB9IGZyb20gXCIuLi9TZXJ2aWNlcy9BcGlUZWNoLmpzXCJcbmltcG9ydCB7IEltYWdlIH0gZnJvbSBcIi4uL1NoYXJlZC9JbWFnZS5qc1wiXG5pbXBvcnQgeyBGb290ZXIgfSBmcm9tIFwiLi4vRm9vdGVyL0Zvb3Rlci5qc1wiXG5cblxuaW1wb3J0IHtcbiAgZ2V0UHJvamVjdHMsXG4gIGFkZFByb2plY3QsXG4gIHVwZGF0ZVByb2plY3QsXG4gIGRlbGV0ZVByb2plY3QsXG4gIHVwZGF0ZVByb2plY3RUZWNobm9sb2dpZXMsXG59IGZyb20gXCIuLi9TZXJ2aWNlcy9BcGlQcm9qZWN0LmpzXCJcbmltcG9ydCB7IEZvcm0sIElucHV0LCBCdXR0b24sIENoZWNrYm94LCBMYWJlbCB9IGZyb20gXCIuLi9TaGFyZWQvRm9ybS5qc1wiXG5pbXBvcnQgeyBFZGl0UHJvamVjdCB9IGZyb20gXCIuL0VkaXRQcm9qZWN0XCJcbmltcG9ydCBcIi4vcHJvamVjdHMuc2Nzc1wiXG5cbi8qKioqKioqKioqXG4gQ0xFQVIgUEFHRVxuKioqKioqKioqKiovXG5jb25zdCBjbGVhclBhZ2UgPSAoZWxlbWVudCkgPT4ge1xuICB3aGlsZSAoZWxlbWVudC5jaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgIGVsZW1lbnQucmVtb3ZlQ2hpbGQoZWxlbWVudC5sYXN0Q2hpbGQpXG4gIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFByb2plY3RzKCkge1xuXG4gIGNvbnN0IG1haW5Db250ZW50ID0gcXMoJy5zY3JvbGxhYmxlLWNvbnRlbnQnKVxuICAvLyBjb25zb2xlLmxvZygnY29udGVudGEnLCBjb250ZW50YSlcbiAgLy8gbGV0IG1haW5Db250ZW50ID0gcXMoXCIubWFpbi1jb250ZW50LXNjcm9sbGFibGVcIilcbiAgY2xlYXJQYWdlKG1haW5Db250ZW50KVxuICBsZXQgbG9hZGluZyA9IG1haW5Db250ZW50LmFwcGVuZENoaWxkKGNlY2woXCJkaXZcIiwgXCJsb2FkaW5nXCIpKVxuICBsb2FkaW5nLmlubmVySFRNTCA9IFwibG9hZGluZy4uLlwiXG5cblxuICAvKioqKioqKioqKioqKipcbiAgUkVOREVSIFBST0pFQ1RTXG4gICoqKioqKioqKioqKioqKi9cbiAgY29uc3QgcmVzcCA9IGF3YWl0IGdldFByb2plY3RzKClcbiAgY2xlYXJQYWdlKG1haW5Db250ZW50KVxuXG5cbiAgY29uc3QgY29udGFpbmVyV2lkdGggPSBtYWluQ29udGVudC5jbGllbnRXaWR0aFxuICAvLyBjb25zdCBzY3JvbGxhYmxlQ29udGVudCA9IGNlY2woJ2RpdicsICdzY3JvbGxhYmxlLWNvbnRlbnQnKVxuICAvLyBtYWluQ29udGVudC5hcHBlbmRDaGlsZChzY3JvbGxhYmxlQ29udGVudClcblxuICByZXNwLmZvckVhY2goYXN5bmMgKHByb2plY3QsIGluZGV4KSA9PiB7XG5cbiAgICBcblxuICAgIGNvbnN0IHByb2plY3RXcmFwID0gbWFpbkNvbnRlbnQuYXBwZW5kQ2hpbGQoY2VjbChcImRpdlwiLCBcInByb2plY3Qtd3JhcFwiKSlcbiAgICBjb25zdCBpbWFnZSA9IHByb2plY3RXcmFwLmFwcGVuZENoaWxkKFxuICAgICAgSW1hZ2UoYHNyYy9pbWcvJHtwcm9qZWN0LmltZ191cmx9YCwgcHJvamVjdC5uYW1lLCB0cnVlLCBwcm9qZWN0LnNpdGVfdXJsLCBwcm9qZWN0LmJ1aWxkX2RhdGUpXG4gICAgKVxuICAgIGNvbnNvbGUubG9nKGltYWdlKVxuICAgIGxldCBib29sID0gXCJmYWxzZVwiXG4gICAgbGV0IGxpbmtNb2RhbCA9IGNlY2woXCJkaXZcIiwgXCJsaW5rLW1vZGFsXCIpXG5cbiAgICBsZXQgaW1nV3JhcHBlciA9IHFzYShcIi5pbWctd3JhcHBlclwiKVxuICAgIGxldCBpbm5lckltZ1dyYXAgPSBxc2EoXCIuaW5uZXItaW1nLXdyYXBcIilcbiAgICBsZXQgdGVjaEljb25zID0gY2VjbChcImRpdlwiLCBcInRlY2gtaWNvbnNcIilcbiAgICBwcm9qZWN0LnRlY2hub2xvZ2llcy5mb3JFYWNoKChpY29uKSA9PiB7XG4gICAgICBsZXQgdGVjaEljb24gPSB0ZWNoSWNvbnMuYXBwZW5kQ2hpbGQoY2VjbChcImltZ1wiLCBcInRlY2gtaWNvblwiKSlcbiAgICAgIHRlY2hJY29uLnNyYyA9IGBzcmMvaW1nLyR7aWNvbi5pY29uX3VybH1gXG4gICAgfSlcbiAgICBsZXQgZGVzY3JpcHRpb24gPSBjZWNsKCdkaXYnLCAnZGVzY3JpcHRpb24nKVxuICAgIGRlc2NyaXB0aW9uLmlubmVySFRNTCA9IHByb2plY3QuZGVzY3JpcHRpb25cblxuICAgIGlmIChjb250YWluZXJXaWR0aCA8IDkwMCkge1xuICAgICAgbGlua01vZGFsLmFwcGVuZENoaWxkKHRlY2hJY29ucylcblxuICAgICAgbGlua01vZGFsLmFwcGVuZENoaWxkKGRlc2NyaXB0aW9uKVxuXG4gICAgfSBlbHNlIHtcblxuICAgICAgbGlua01vZGFsLmFwcGVuZENoaWxkKGRlc2NyaXB0aW9uKVxuICAgICAgbGlua01vZGFsLmFwcGVuZENoaWxkKHRlY2hJY29ucylcblxuICAgIH1cblxuXG5cbiAgICBsZXQgbGlua01vZGFsSWNvbnMgPSBsaW5rTW9kYWwuYXBwZW5kQ2hpbGQoY2VjbCgnZGl2JywgJ2xpbmstbW9kYWwtaWNvbnMnKSlcblxuXG4gICAgbGlua01vZGFsSWNvbnMuaW5uZXJIVE1MID1cbiAgICAgIGA8ZGl2PjxhIGhyZWY9JHtwcm9qZWN0LnNpdGVfdXJsfSB0YXJnZXQ9J19ibGFuayc+PGkgY2xhc3M9XCJmYXMgZmEtaG9tZSBmYS1md1wiPjwvaT48L2E+XG4gICAgPHAgY2xhc3M9J2hvbWUtdG9vbC10aXAnPndlYnNpdGU8L3A+PC9kaXY+XG5cbiAgICA8ZGl2PjxhIGhyZWY9JHtwcm9qZWN0LmdpdGh1Yl91cmx9IHRhcmdldD0nX2JsYW5rJz48aSBjbGFzcz1cImZhYiBmYS1naXRodWJcIj48L2k+PC9hPlxuICAgIDxwIGNsYXNzPSdnaXRodWItdG9vbC10aXAnPmdpdGh1YjwvcD48L2Rpdj5gXG5cblxuICAgIGNvbnNvbGUubG9nKGlubmVySW1nV3JhcFswXS5jaGlsZHJlblsxXSlcblxuXG5cblxuXG5cbiAgICAvKioqKioqKioqKioqKipcbiAgICBBREQgTElOSyBNT0RBTFxuICAgICoqKioqKioqKioqKioqKi9cbiAgICBpbWdXcmFwcGVyW2luZGV4XS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgaWYgKGJvb2wgPT09IFwidHJ1ZVwiKSB7XG4gICAgICAgIGJvb2wgPSBcImZhbHNlXCJcbiAgICAgICAgaW5uZXJJbWdXcmFwW2luZGV4XS5jbGFzc0xpc3QuYWRkKFwiY2xvc2UtY3VydGFpblwiKVxuICAgICAgICBpbm5lckltZ1dyYXBbaW5kZXhdLmNsYXNzTGlzdC5yZW1vdmUoXCJvcGVuLWN1cnRhaW5cIilcbiAgICAgICAgaW1nV3JhcHBlcltpbmRleF0ubGFzdENoaWxkLnJlbW92ZSgpXG5cblxuICAgICAgICBpbWdXcmFwcGVyW2luZGV4XS5zdHlsZS53aWR0aCA9ICc4MCUnXG4gICAgICAgIGltZ1dyYXBwZXJbaW5kZXhdLnN0eWxlLnBhZGRpbmcgPSAnNiUnXG4gICAgICAgIGltZ1dyYXBwZXJbaW5kZXhdLnN0eWxlLm1hcmdpbiA9ICcwJ1xuXG4gICAgICAgIHByb2plY3RXcmFwLnN0eWxlLm1hcmdpbiA9ICcwIDEwJSAzJSAxMCUnXG4gICAgICAgIGlubmVySW1nV3JhcFtpbmRleF0uc3R5bGUud2lkdGggPSAnMTAwJSdcblxuICAgICAgICBwcm9qZWN0V3JhcC5jbGFzc0xpc3QucmVtb3ZlKFwicHJvamVjdC13cmFwLWNsaWNrXCIpXG5cbiAgICAgICAgaW1hZ2UubGFzdENoaWxkLnJlbW92ZSgpXG5cbiAgICAgICAgLy8gaW5uZXJJbWdXcmFwW2luZGV4XS5zdHlsZS5oZWlnaHQgPSAnMTAwJSdcblxuICAgICAgfSBlbHNlIGlmIChib29sID09PSBcImZhbHNlXCIpIHtcbiAgICAgICAgY29uc29sZS5sb2coYm9vbClcbiAgICAgICAgYm9vbCA9IFwidHJ1ZVwiXG4gICAgICAgIGlubmVySW1nV3JhcFtpbmRleF0uY2xhc3NMaXN0LmFkZChcIm9wZW4tY3VydGFpblwiKVxuICAgICAgICBpbm5lckltZ1dyYXBbaW5kZXhdLmNsYXNzTGlzdC5yZW1vdmUoXCJjbG9zZS1jdXJ0YWluXCIpXG4gICAgICAgIGltZ1dyYXBwZXJbaW5kZXhdLmFwcGVuZENoaWxkKGxpbmtNb2RhbClcblxuXG4gICAgICAgIGlmIChjb250YWluZXJXaWR0aCA8IDkwMCkge1xuICAgICAgICAgIGltZ1dyYXBwZXJbaW5kZXhdLnN0eWxlLmZsZXhEaXJlY3Rpb24gPSAnY29sdW1uJ1xuICAgICAgICAgIGxpbmtNb2RhbC5zdHlsZS53aWR0aCA9ICc5MCUnXG4gICAgICAgICAgdGVjaEljb25zLnN0eWxlLndpZHRoID0gJzgwJSdcbiAgICAgICAgICBsaW5rTW9kYWwuc3R5bGUubWFyZ2luVG9wID0gJzUlJ1xuICAgICAgICAgIGxpbmtNb2RhbC5zdHlsZS5iYWNrZ3JvdW5kID0gJ3JnYigyNDAsIDI1MywgMjUzKSdcbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgIGltZ1dyYXBwZXJbaW5kZXhdLnN0eWxlLndpZHRoID0gJzkwJSdcbiAgICAgICAgICBpbWdXcmFwcGVyW2luZGV4XS5zdHlsZS5wYWRkaW5nID0gJzIlJ1xuICAgICAgICAgIGltZ1dyYXBwZXJbaW5kZXhdLnN0eWxlLm1hcmdpbiA9ICcwIGF1dG8nXG4gICAgICAgICAgcHJvamVjdFdyYXAuc3R5bGUubWFyZ2luID0gJzAgMSUnXG5cbiAgICAgICAgICBpbm5lckltZ1dyYXBbaW5kZXhdLnN0eWxlLndpZHRoID0gJzk5JSdcbiAgICAgICAgICBpbm5lckltZ1dyYXBbaW5kZXhdLnN0eWxlLmhlaWdodCA9ICc5OSUnXG4gICAgICAgICAgLy8gXG4gICAgICAgIH1cblxuXG4gICAgICAgIGlmIChjb250YWluZXJXaWR0aCA8IDkwMCkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCc5MDAtJylcbiAgICAgICAgICBpbWFnZS5hcHBlbmRDaGlsZCh0ZWNoSWNvbnMpXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJzkwMCsnKVxuICAgICAgICAgIGlubmVySW1nV3JhcFtpbmRleF0uYXBwZW5kQ2hpbGQodGVjaEljb25zKVxuXG4gICAgICAgIH1cblxuXG5cbiAgICAgICAgY29uc29sZS5sb2coaW1hZ2UpXG5cbiAgICAgICAgbGV0IGl3ID0gaW1nV3JhcHBlcltpbmRleF0uc3R5bGVcbiAgICAgICAgaXcuc2V0UHJvcGVydHkoXG4gICAgICAgICAgXCItLWFuaW1hdGlvblwiLFxuICAgICAgICAgIFwiYW5pbWF0ZS1pbWctd3JhcHBlciAxLjVzIGxpbmVhciBmb3J3YXJkc1wiXG4gICAgICAgIClcbiAgICAgICAgcHJvamVjdFdyYXAuY2xhc3NMaXN0LmFkZChcInByb2plY3Qtd3JhcC1jbGlja1wiKVxuXG4gICAgICB9XG4gICAgfSlcblxuICAgIC8qKioqKioqKioqKioqKioqKioqXG4gICAgIEVESVQgUFJPSkVDVCBCVVRUT05cbiAgICAqKioqKioqKioqKioqKioqKioqKi9cbiAgICBpZiAoYXdhaXQgdmVyaWZ5KCkpIHtcbiAgICAgIGNvbnN0IGVkaXRQcm9qZWN0V3JhcHBlciA9IGNlY2woXCJkaXZcIiwgXCJlZGl0LXByb2plY3Qtd3JhcHBlclwiKVxuICAgICAgY29uc3QgZWRpdEJ1dHRvbiA9IEJ1dHRvbihcInNob3ctZWRpdC1idXR0b25cIiwgXCJzdWJtaXRcIiwgXCJ1cGRhdGVcIilcbiAgICAgIGVkaXRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2cocHJvamVjdFdyYXAubGFzdENoaWxkLmNsYXNzTmFtZSlcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHByb2plY3RXcmFwLmxhc3RDaGlsZC5jbGFzc05hbWUgIT09IFwiZWRpdC1wcm9qZWN0LWZvcm1cIlxuICAgICAgICApXG4gICAgICAgICAgRWRpdFByb2plY3QocHJvamVjdFdyYXAsIHByb2plY3QpXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHByb2plY3RXcmFwLmxhc3RDaGlsZC5yZW1vdmUoKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgZWRpdFByb2plY3RXcmFwcGVyLmFwcGVuZENoaWxkKGVkaXRCdXR0b24pXG5cbiAgICAgIC8qKioqKioqKioqKioqKioqKioqKioqKipcbiAgICAgICBERUxFVEUgUFJPSkVDVCBCVVRUT05cbiAgICAgICoqKioqKioqKioqKioqKioqKioqKioqKi9cbiAgICAgIGNvbnN0IGRlbGV0ZUJ1dHRvbiA9IEJ1dHRvbihcImRlbGV0ZS1wcm9qZWN0XCIsIFwic3VibWl0XCIsIFwiZGVsZXRlXCIpXG4gICAgICBkZWxldGVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGFzeW5jICgpID0+IHtcbiAgICAgICAgbGV0IGFuc3dlciA9IGNvbmZpcm0oYEFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUgJHtwcm9qZWN0Lm5hbWV9P2ApXG4gICAgICAgIGFuc3dlciAmJiBhd2FpdCBkZWxldGVQcm9qZWN0KHByb2plY3QuaWQpXG4gICAgICAgIGFuc3dlciAmJiBhd2FpdCBQcm9qZWN0cygpXG4gICAgICB9KVxuICAgICAgZWRpdFByb2plY3RXcmFwcGVyLmFwcGVuZENoaWxkKGRlbGV0ZUJ1dHRvbilcblxuICAgICAgcHJvamVjdFdyYXAuYXBwZW5kQ2hpbGQoZWRpdFByb2plY3RXcmFwcGVyKVxuICAgIH1cbiAgfSlcblxuICAvKioqKioqKioqKipcbiAgQUREIFBST0pFQ1QgXG4gICoqKioqKioqKioqKi9cbiAgaWYgKGF3YWl0IHZlcmlmeSgpKSB7XG4gICAgY29uc29sZS5sb2coJ25vdCBmYWlyJylcbiAgICBsZXQgYWRkQnRuID0gQnV0dG9uKFwic2hvdy1hZGQtZm9ybVwiLCBcInN1Ym1pdFwiLCBcImFkZCBwcm9qZWN0XCIpXG4gICAgYWRkQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhtYWluQ29udGVudC5sYXN0Q2hpbGQucHJldmlvdXNTaWJsaW5nLmNsYXNzTmFtZSlcbiAgICAgIGlmIChtYWluQ29udGVudC5sYXN0Q2hpbGQucHJldmlvdXNTaWJsaW5nLmNsYXNzTmFtZSA9PT0gXCJzaG93LWFkZC1mb3JtXCIpXG4gICAgICAgIEVkaXRQcm9qZWN0KG1haW5Db250ZW50LCByZXNwWzBdLCBcImFkZFByb2plY3RcIilcbiAgICAgIGVsc2Uge1xuICAgICAgICBtYWluQ29udGVudC5sYXN0Q2hpbGQucmVtb3ZlKClcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgYWMobWFpbkNvbnRlbnQsIGFkZEJ0bilcbiAgfVxuXG4gIC8vIC8vZG93biBidXR0b25cblxuICAvLyBjb25zdCBzZWVNb3JlQnRuID0gQnV0dG9uKCdzZWUtbW9yZS1idG4nLCAnc3VibWl0JywgJ3NlZSBtb3JlJylcblxuICAvLyBhYyhtYWluQ29udGVudCwgc2VlTW9yZUJ0bilcblxuICBtYWluQ29udGVudC5hcHBlbmRDaGlsZChGb290ZXIoKSlcblxuXG59XG4iLCJpbXBvcnQgeyBGb3JtLCBJbnB1dCwgQnV0dG9uLCBDaGVja2JveCwgTGFiZWwgfSBmcm9tIFwiLi4vU2hhcmVkL0Zvcm0uanNcIlxuaW1wb3J0IHsgZ2V0VGVjaG5vbG9naWVzIH0gZnJvbSBcIi4uL1NlcnZpY2VzL0FwaVRlY2guanNcIlxuaW1wb3J0IHtcbiAgZ2V0UHJvamVjdCxcbiAgYWRkUHJvamVjdCBhcyBhZGROZXdQcm9qZWN0LFxuICB1cGRhdGVQcm9qZWN0LFxuICBkZWxldGVQcm9qZWN0LFxuICB1cGRhdGVQcm9qZWN0VGVjaG5vbG9naWVzLFxufSBmcm9tIFwiLi4vU2VydmljZXMvQXBpUHJvamVjdC5qc1wiXG5pbXBvcnQgeyBQcm9qZWN0cyB9IGZyb20gXCIuL1Byb2plY3RzLmpzXCJcbmltcG9ydCB7IGFjLCBjZWNsIH0gZnJvbSBcIi4uL0hlbHBlcnMvZG9tSGVscGVyLmpzXCJcblxuZXhwb3J0IGNvbnN0IEVkaXRQcm9qZWN0ID0gYXN5bmMgKHByb2plY3RXcmFwLCBwcm9qZWN0LCBhZGRQcm9qZWN0KSA9PiB7XG4gIC8qKioqKioqKioqKioqKioqKioqKioqKipcbiAgTUFLRSBBTkQgU0VUIEZPUk0gIElOUFVUU1xuICAqKioqKioqKioqKioqKioqKioqKioqKioqL1xuICBjb25zb2xlLmxvZyhcImFkZFwiLCBhZGRQcm9qZWN0KVxuICBpZiAoYWRkUHJvamVjdCA9PT0gXCJhZGRQcm9qZWN0XCIpIHtcbiAgICBmb3IgKGxldCBpdGVtIGluIHByb2plY3QpIHtcbiAgICAgIHByb2plY3RbaXRlbV0gPSBcIlwiXG4gICAgfVxuICB9XG4gIGxldCBuZXdQcm9qZWN0ID0ge31cblxuICBsZXQgaGFuZGxlQ2hhbmdlID0gKGUpID0+IHtcbiAgICBjb25zb2xlLmxvZyhlLnRhcmdldC5uYW1lLCBlLnRhcmdldC52YWx1ZSlcbiAgICBuZXdQcm9qZWN0W2UudGFyZ2V0Lm5hbWVdID0gZS50YXJnZXQudmFsdWVcbiAgICBjb25zb2xlLmxvZygnY21vbicsIG5ld1Byb2plY3QpXG4gIH1cblxuICBsZXQgZm9ybSA9IEZvcm0oXCJlZGl0LXByb2plY3QtZm9ybVwiKVxuICBsZXQgaW5wdXRzID0gY2VjbCgnZGl2JywgJ2VkaXQtZm9ybS1pbnB1dHMnKVxuICBmb3JtLmFwcGVuZENoaWxkKGlucHV0cylcbiAgT2JqZWN0LmtleXMocHJvamVjdCkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgaWYgKFxuICAgICAga2V5ICE9PSBcImlkXCIgJiZcbiAgICAgIGtleSAhPT0gXCJ0ZWNobm9sb2dpZXNcIiAmJlxuICAgICAga2V5ICE9PSBcImNyZWF0ZWRfYXRcIiAmJlxuICAgICAga2V5ICE9PSBcInVwZGF0ZWRfYXRcIlxuICAgICkge1xuICAgICAgbmV3UHJvamVjdFtrZXldID0gcHJvamVjdFtrZXldXG4gICAgICBjb25zdCBpbnB1dCA9IElucHV0KHtcbiAgICAgICAgY2xhc3NOYW1lOiBcImVkaXQtZm9ybS1pbnB1dFwiLFxuICAgICAgICBuYW1lOiBrZXksXG4gICAgICAgIHR5cGU6IFwidGV4dFwiLFxuICAgICAgICB2YWx1ZTogYWRkUHJvamVjdCA9PT0gXCJhZGRQcm9qZWN0XCIgPyBcIlwiIDogbmV3UHJvamVjdFtrZXldLFxuICAgICAgICBwbGFjZWhvbGRlcjoga2V5LFxuICAgICAgICBoYW5kbGVDaGFuZ2U6IGhhbmRsZUNoYW5nZSxcbiAgICAgIH0pXG4gICAgICBpbnB1dHMuYXBwZW5kQ2hpbGQoaW5wdXQpXG4gICAgfVxuICB9KVxuXG4gIC8qKioqKioqKioqKioqKlxuICAgU0VUIENIRUNLQk9YRVNcbiAgKioqKioqKioqKioqKioqL1xuICBjb25zdCBjaGVja3MgPSBjZWNsKCdkaXYnLCAnZWRpdC1mb3JtLWNoZWNrYm94ZXMnKVxuICBmb3JtLmFwcGVuZENoaWxkKGNoZWNrcylcbiAgbGV0IHRlY2hub2xvZ2llcyA9IGF3YWl0IGdldFRlY2hub2xvZ2llcygpXG4gIHRlY2hub2xvZ2llcy5tYXAoKHRlY2hub2xvZ3kpID0+IHtcblxuICAgIGxldCBjaGVja2VkXG4gICAgYWRkUHJvamVjdCA9PT0gdW5kZWZpbmVkICYmXG4gICAgICBwcm9qZWN0LnRlY2hub2xvZ2llcy5mb3JFYWNoKChwcm9qZWN0VGVjaG5vbG9neSkgPT4ge1xuICAgICAgICBpZiAodGVjaG5vbG9neS5uYW1lID09PSBwcm9qZWN0VGVjaG5vbG9neS5uYW1lKSB7XG4gICAgICAgICAgY29uc29sZS5sb2codGVjaG5vbG9neS5uYW1lLCBwcm9qZWN0VGVjaG5vbG9neS5uYW1lKVxuICAgICAgICAgIGNoZWNrZWQgPSBcImNoZWNrZWRcIlxuICAgICAgICB9XG4gICAgICB9KVxuICAgIGxldCBieCA9IENoZWNrYm94KHtcbiAgICAgIGNsYXNzTmFtZTogXCJlZGl0LXByb2plY3QtY2hrYm94XCIsXG4gICAgICBuYW1lOiB0ZWNobm9sb2d5Lm5hbWUsXG4gICAgICBpZDogdGVjaG5vbG9neS5uYW1lLFxuICAgICAgdmFsdWU6IHRlY2hub2xvZ3kuaWQsXG4gICAgICBjaGVja2VkOiBhZGRQcm9qZWN0ID09PSBcImFkZFByb2plY3RcIiA/IFwiXCIgOiBjaGVja2VkLFxuXG4gICAgfSlcbiAgICBjaGVja3MuYXBwZW5kQ2hpbGQoYngpXG4gICAgY2hlY2tzLmFwcGVuZENoaWxkKExhYmVsKFwidGVjaC1ib3gtbGFiZWxcIiwgdGVjaG5vbG9neS5uYW1lLCBcInRlY2gtYm94XCIpKVxuXG4gIH0pXG4gIGZvcm0uYXBwZW5kQ2hpbGQoXG4gICAgQnV0dG9uKFxuICAgICAgXCJlZGl0LXByb2plY3QtYnV0dG9uXCIsXG4gICAgICBcInN1Ym1pdFwiLFxuICAgICAgYWRkUHJvamVjdCA9PT0gXCJhZGRQcm9qZWN0XCIgPyBcImFkZCBuZXcgcHJvamVjdFwiIDogXCJzdWJtaXRcIlxuICAgIClcbiAgKVxuXG5cbiAgYWMocHJvamVjdFdyYXAsIGZvcm0pXG5cblxuICAvKioqKioqKioqKlxuICAgU1VCTUlUIEZPUk1cbiAgKioqKioqKioqKiovXG4gIGZvcm0uYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCBhc3luYyAoZXZ0KSA9PiB7XG4gICAgZXZ0LnByZXZlbnREZWZhdWx0KClcbiAgICBjb25zb2xlLmxvZyhcImFkZFwiLCBhZGRQcm9qZWN0KVxuXG4gICAgY29uc3QgY2hlY2tib3hlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFt0eXBlPWNoZWNrYm94XTpjaGVja2VkXCIpXG4gICAgY29uc29sZS5sb2coY2hlY2tib3hlcywgbmV3UHJvamVjdClcbiAgICBuZXdQcm9qZWN0LnRlY2hub2xvZ2llcyA9IFtdXG4gICAgY2hlY2tib3hlcy5mb3JFYWNoKChib3gpID0+IHtcbiAgICAgIG5ld1Byb2plY3QudGVjaG5vbG9naWVzLnB1c2goYm94LnZhbHVlKVxuICAgIH0pXG4gICAgY29uc29sZS5sb2coXCJhZGRcIiwgbmV3UHJvamVjdClcbiAgICBhZGRQcm9qZWN0ID09PSBcImFkZFByb2plY3RcIlxuICAgICAgPyBhd2FpdCBhZGROZXdQcm9qZWN0KG5ld1Byb2plY3QpXG4gICAgICA6IGF3YWl0IHVwZGF0ZVByb2plY3QobmV3UHJvamVjdCwgcHJvamVjdC5pZClcblxuICAgIGF3YWl0IFByb2plY3RzKClcbiAgfSlcbn1cbiIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3Byb2plY3RzLnNjc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cbnZhciBleHBvcnRlZCA9IGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB7fTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0ZWQ7Il0sInNvdXJjZVJvb3QiOiIifQ==