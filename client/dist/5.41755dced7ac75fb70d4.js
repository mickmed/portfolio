(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{100:function(e,n,t){var o=t(1),i=t(101);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var s={insert:"head",singleton:!1},d=(o(i,s),i.locals?i.locals:{});e.exports=d},101:function(e,n,t){},109:function(e,n,t){"use strict";t.r(n),t.d(n,"Lessons",(function(){return s}));var o=t(0),i=t(3);t(100);async function s(){const e=await Object(o.e)(".main-content-scrollable");for(console.log(e);e.childNodes.length;)e.removeChild(e.lastChild);const n=e.clientWidth;let t,s;console.log(n),n>600&&n<900?(t=480,s=299):n>900&&n<1200?(t=960,s=569):n>1200&&(t=1440,s=839);const d=Object(o.c)("div","linked-lists");d.innerHTML="<div><h3>Linked Lists</h3>\n            <p>Slide 1) The unshift method calls the Node class and adds a new node to the beginning of the linked list. We can see that as each new node is created <i>this.next</i> points to the following node.</p>\n        </div>";const l=Object(o.c)("a","link");l.href="https://docs.google.com/presentation/d/e/2PACX-1vTDsnjcpJ49de8trQkESBQbLFeeqywV_VJB_mgb5l1oqsaLTs5Rp8rS-XbDhjFeJDpqrNuZ34GGCabs/embed?start=false&loop=false&delayms=3000",l.innerHTML="link to orginal document",l.target="_blank";const a=Object(o.c)("div","doc-wrapper"),c=Object(o.c)("iframe","slides");c.src="https://docs.google.com/presentation/d/e/2PACX-1vTDsnjcpJ49de8trQkESBQbLFeeqywV_VJB_mgb5l1oqsaLTs5Rp8rS-XbDhjFeJDpqrNuZ34GGCabs/embed?start=false&loop=false&delayms=3000",c.frameborder="0",c.allowfullscreen="true",c.mozallowfullscreen="true",c.webkitallowfullscreen="true",a.appendChild(c);const p=Object(o.c)("div","linked-lists");p.innerHTML="<div>\n            <p>Slide 2) The push method calls the node class and adds a new node to the end of the linked list. The <i>this.next</i> property of the previous node points to our new node.</p>\n            <p>Slide 3) The insertAt method adds a new node to the specified position in the list. The <i>this.next</i> property of the previous node points to our new node.</p>\n            <p>Slide 4) The getAt method retrieves the given node at the given index.</p>\n            <p>Slide 5) The deleteAt removes a given node at the given index.</p>\n        </div>",e.appendChild(d),e.appendChild(l),e.appendChild(a),e.appendChild(p),e.appendChild(Object(i.a)())}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQ29tcG9uZW50cy9MZXNzb25zL0xlc3Nzb25zLnNjc3M/NjQ0OSIsIndlYnBhY2s6Ly8vLi9zcmMvQ29tcG9uZW50cy9MZXNzb25zL0xlc3NvbnMuanMiXSwibmFtZXMiOlsiYXBpIiwiY29udGVudCIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwibW9kdWxlIiwiaSIsIm9wdGlvbnMiLCJleHBvcnRlZCIsImxvY2FscyIsImV4cG9ydHMiLCJhc3luYyIsIkxlc3NvbnMiLCJtYWluQ29udGVudFNjcm9sbGFibGUiLCJjb25zb2xlIiwibG9nIiwiY2hpbGROb2RlcyIsImxlbmd0aCIsInJlbW92ZUNoaWxkIiwibGFzdENoaWxkIiwid2lkdGgiLCJjbGllbnRXaWR0aCIsImZyYW1lV2lkdGgiLCJmcmFtZUhlaWdodCIsImxpbmtMaXN0IiwiaW5uZXJIVE1MIiwibGluayIsImhyZWYiLCJ0YXJnZXQiLCJkb2NXcmFwcGVyIiwiZG9jIiwic3JjIiwiZnJhbWVib3JkZXIiLCJhbGxvd2Z1bGxzY3JlZW4iLCJtb3phbGxvd2Z1bGxzY3JlZW4iLCJ3ZWJraXRhbGxvd2Z1bGxzY3JlZW4iLCJhcHBlbmRDaGlsZCIsImxpbmtMaXN0MiJdLCJtYXBwaW5ncyI6IjZFQUFBLElBQUlBLEVBQU0sRUFBUSxHQUNGQyxFQUFVLEVBQVEsS0FJQyxpQkFGdkJBLEVBQVVBLEVBQVFDLFdBQWFELEVBQVFFLFFBQVVGLEtBRy9DQSxFQUFVLENBQUMsQ0FBQ0csRUFBT0MsRUFBSUosRUFBUyxNQUc5QyxJQUFJSyxFQUFVLENBRWQsT0FBaUIsT0FDakIsV0FBb0IsR0FJaEJDLEdBRlNQLEVBQUlDLEVBQVNLLEdBRVhMLEVBQVFPLE9BQVNQLEVBQVFPLE9BQVMsSUFJakRKLEVBQU9LLFFBQVVGLEcsK0hDZFZHLGVBQWVDLElBR2xCLE1BQU1DLFFBQThCLFlBQUcsNEJBRXZDLElBREFDLFFBQVFDLElBQUlGLEdBQ0xBLEVBQXNCRyxXQUFXQyxRQUNwQ0osRUFBc0JLLFlBQVlMLEVBQXNCTSxXQUc1RCxNQUFNQyxFQUFRUCxFQUFzQlEsWUFFcEMsSUFBSUMsRUFBWUMsRUFEaEJULFFBQVFDLElBQUlLLEdBRVJBLEVBQVEsS0FBT0EsRUFBUSxLQUN2QkUsRUFBYSxJQUNiQyxFQUFjLEtBRVBILEVBQVEsS0FBT0EsRUFBUSxNQUM5QkUsRUFBYSxJQUNiQyxFQUFjLEtBR1BILEVBQVEsT0FDZkUsRUFBYSxLQUNiQyxFQUFjLEtBR2xCLE1BQU1DLEVBQVcsWUFBSyxNQUFPLGdCQUM3QkEsRUFBU0MsVUFDTCxzUUFJSixNQUFNQyxFQUFPLFlBQUssSUFBSyxRQUN2QkEsRUFBS0MsS0FBTyw0S0FDWkQsRUFBS0QsVUFBWSwyQkFDakJDLEVBQUtFLE9BQVMsU0FFZCxNQUFNQyxFQUFhLFlBQUssTUFBTyxlQUN6QkMsRUFBTSxZQUFLLFNBQVUsVUFDM0JBLEVBQUlDLElBQU0sNEtBQ1ZELEVBQUlFLFlBQWMsSUFDbEJGLEVBQUlHLGdCQUFrQixPQUN0QkgsRUFBSUksbUJBQXFCLE9BQ3pCSixFQUFJSyxzQkFBd0IsT0FDNUJOLEVBQVdPLFlBQVlOLEdBRXZCLE1BQU1PLEVBQVksWUFBSyxNQUFPLGdCQUM5QkEsRUFBVVosVUFDTix5akJBT0paLEVBQXNCdUIsWUFBWVosR0FDbENYLEVBQXNCdUIsWUFBWVYsR0FDbENiLEVBQXNCdUIsWUFBWVAsR0FDbENoQixFQUFzQnVCLFlBQVlDLEdBQ2xDeEIsRUFBc0J1QixZQUFZIiwiZmlsZSI6IjUuNDE3NTVkY2VkN2FjNzVmYjcwZDQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9MZXNzc29ucy5zY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG52YXIgZXhwb3J0ZWQgPSBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDoge307XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydGVkOyIsIlxuaW1wb3J0IHsgY2VjbCwgcXMgfSBmcm9tICcuLi9IZWxwZXJzL2RvbUhlbHBlcidcbmltcG9ydCB7IEZvb3RlciB9IGZyb20gJy4uL0Zvb3Rlci9Gb290ZXIuanMnXG5pbXBvcnQgJy4vTGVzc3NvbnMuc2NzcydcblxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gTGVzc29ucygpIHtcblxuXG4gICAgY29uc3QgbWFpbkNvbnRlbnRTY3JvbGxhYmxlID0gYXdhaXQgcXMoXCIubWFpbi1jb250ZW50LXNjcm9sbGFibGVcIik7XG4gICAgY29uc29sZS5sb2cobWFpbkNvbnRlbnRTY3JvbGxhYmxlKVxuICAgIHdoaWxlIChtYWluQ29udGVudFNjcm9sbGFibGUuY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgICAgbWFpbkNvbnRlbnRTY3JvbGxhYmxlLnJlbW92ZUNoaWxkKG1haW5Db250ZW50U2Nyb2xsYWJsZS5sYXN0Q2hpbGQpXG4gICAgfVxuXG4gICAgY29uc3Qgd2lkdGggPSBtYWluQ29udGVudFNjcm9sbGFibGUuY2xpZW50V2lkdGhcbiAgICBjb25zb2xlLmxvZyh3aWR0aClcbiAgICBsZXQgZnJhbWVXaWR0aCwgZnJhbWVIZWlnaHRcbiAgICBpZiAod2lkdGggPiA2MDAgJiYgd2lkdGggPCA5MDApIHtcbiAgICAgICAgZnJhbWVXaWR0aCA9IDQ4MFxuICAgICAgICBmcmFtZUhlaWdodCA9IDI5OVxuXG4gICAgfSBlbHNlIGlmICh3aWR0aCA+IDkwMCAmJiB3aWR0aCA8IDEyMDApIHtcbiAgICAgICAgZnJhbWVXaWR0aCA9IDk2MFxuICAgICAgICBmcmFtZUhlaWdodCA9IDU2OVxuXG5cbiAgICB9IGVsc2UgaWYgKHdpZHRoID4gMTIwMCkge1xuICAgICAgICBmcmFtZVdpZHRoID0gMTQ0MFxuICAgICAgICBmcmFtZUhlaWdodCA9IDgzOVxuICAgIH1cblxuICAgIGNvbnN0IGxpbmtMaXN0ID0gY2VjbCgnZGl2JywgJ2xpbmtlZC1saXN0cycpXG4gICAgbGlua0xpc3QuaW5uZXJIVE1MID1cbiAgICAgICAgYDxkaXY+PGgzPkxpbmtlZCBMaXN0czwvaDM+XG4gICAgICAgICAgICA8cD5TbGlkZSAxKSBUaGUgdW5zaGlmdCBtZXRob2QgY2FsbHMgdGhlIE5vZGUgY2xhc3MgYW5kIGFkZHMgYSBuZXcgbm9kZSB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBsaW5rZWQgbGlzdC4gV2UgY2FuIHNlZSB0aGF0IGFzIGVhY2ggbmV3IG5vZGUgaXMgY3JlYXRlZCA8aT50aGlzLm5leHQ8L2k+IHBvaW50cyB0byB0aGUgZm9sbG93aW5nIG5vZGUuPC9wPlxuICAgICAgICA8L2Rpdj5gXG5cbiAgICBjb25zdCBsaW5rID0gY2VjbCgnYScsICdsaW5rJylcbiAgICBsaW5rLmhyZWYgPSBgaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vcHJlc2VudGF0aW9uL2QvZS8yUEFDWC0xdlREc25qY3BKNDlkZTh0clFrRVNCUWJMRmVlcXl3Vl9WSkJfbWdiNWwxb3FzYUxUczVScDhyUy1YYkRoakZlSkRwcXJOdVozNEdHQ2Ficy9lbWJlZD9zdGFydD1mYWxzZSZsb29wPWZhbHNlJmRlbGF5bXM9MzAwMGBcbiAgICBsaW5rLmlubmVySFRNTCA9ICdsaW5rIHRvIG9yZ2luYWwgZG9jdW1lbnQnXG4gICAgbGluay50YXJnZXQgPSAnX2JsYW5rJ1xuXG4gICAgY29uc3QgZG9jV3JhcHBlciA9IGNlY2woJ2RpdicsICdkb2Mtd3JhcHBlcicpXG4gICAgY29uc3QgZG9jID0gY2VjbCgnaWZyYW1lJywgJ3NsaWRlcycpXG4gICAgZG9jLnNyYyA9IGBodHRwczovL2RvY3MuZ29vZ2xlLmNvbS9wcmVzZW50YXRpb24vZC9lLzJQQUNYLTF2VERzbmpjcEo0OWRlOHRyUWtFU0JRYkxGZWVxeXdWX1ZKQl9tZ2I1bDFvcXNhTFRzNVJwOHJTLVhiRGhqRmVKRHBxck51WjM0R0dDYWJzL2VtYmVkP3N0YXJ0PWZhbHNlJmxvb3A9ZmFsc2UmZGVsYXltcz0zMDAwYFxuICAgIGRvYy5mcmFtZWJvcmRlciA9IFwiMFwiXG4gICAgZG9jLmFsbG93ZnVsbHNjcmVlbiA9IFwidHJ1ZVwiXG4gICAgZG9jLm1vemFsbG93ZnVsbHNjcmVlbiA9IFwidHJ1ZVwiXG4gICAgZG9jLndlYmtpdGFsbG93ZnVsbHNjcmVlbiA9IFwidHJ1ZVwiXG4gICAgZG9jV3JhcHBlci5hcHBlbmRDaGlsZChkb2MpXG5cbiAgICBjb25zdCBsaW5rTGlzdDIgPSBjZWNsKCdkaXYnLCAnbGlua2VkLWxpc3RzJylcbiAgICBsaW5rTGlzdDIuaW5uZXJIVE1MID1cbiAgICAgICAgYDxkaXY+XG4gICAgICAgICAgICA8cD5TbGlkZSAyKSBUaGUgcHVzaCBtZXRob2QgY2FsbHMgdGhlIG5vZGUgY2xhc3MgYW5kIGFkZHMgYSBuZXcgbm9kZSB0byB0aGUgZW5kIG9mIHRoZSBsaW5rZWQgbGlzdC4gVGhlIDxpPnRoaXMubmV4dDwvaT4gcHJvcGVydHkgb2YgdGhlIHByZXZpb3VzIG5vZGUgcG9pbnRzIHRvIG91ciBuZXcgbm9kZS48L3A+XG4gICAgICAgICAgICA8cD5TbGlkZSAzKSBUaGUgaW5zZXJ0QXQgbWV0aG9kIGFkZHMgYSBuZXcgbm9kZSB0byB0aGUgc3BlY2lmaWVkIHBvc2l0aW9uIGluIHRoZSBsaXN0LiBUaGUgPGk+dGhpcy5uZXh0PC9pPiBwcm9wZXJ0eSBvZiB0aGUgcHJldmlvdXMgbm9kZSBwb2ludHMgdG8gb3VyIG5ldyBub2RlLjwvcD5cbiAgICAgICAgICAgIDxwPlNsaWRlIDQpIFRoZSBnZXRBdCBtZXRob2QgcmV0cmlldmVzIHRoZSBnaXZlbiBub2RlIGF0IHRoZSBnaXZlbiBpbmRleC48L3A+XG4gICAgICAgICAgICA8cD5TbGlkZSA1KSBUaGUgZGVsZXRlQXQgcmVtb3ZlcyBhIGdpdmVuIG5vZGUgYXQgdGhlIGdpdmVuIGluZGV4LjwvcD5cbiAgICAgICAgPC9kaXY+YFxuXG4gICAgbWFpbkNvbnRlbnRTY3JvbGxhYmxlLmFwcGVuZENoaWxkKGxpbmtMaXN0KVxuICAgIG1haW5Db250ZW50U2Nyb2xsYWJsZS5hcHBlbmRDaGlsZChsaW5rKVxuICAgIG1haW5Db250ZW50U2Nyb2xsYWJsZS5hcHBlbmRDaGlsZChkb2NXcmFwcGVyKVxuICAgIG1haW5Db250ZW50U2Nyb2xsYWJsZS5hcHBlbmRDaGlsZChsaW5rTGlzdDIpXG4gICAgbWFpbkNvbnRlbnRTY3JvbGxhYmxlLmFwcGVuZENoaWxkKEZvb3RlcigpKVxuXG59Il0sInNvdXJjZVJvb3QiOiIifQ==