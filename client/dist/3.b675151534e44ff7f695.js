(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{115:function(e,t,n){var o=n(1),a=n(116);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.i,a,""]]);var c={insert:"head",singleton:!1},i=(o(a,c),a.locals?a.locals:{});e.exports=i},116:function(e,t,n){},125:function(e,t,n){"use strict";n.r(t),n.d(t,"Technologies",(function(){return l}));var o=n(0),a=n(97),c=n(99),i=n(3);n(115);async function l(){const e=Object(o.e)(".scrollable-content");for(;e.childNodes.length;)e.removeChild(e.lastChild);const t=await Object(a.d)(),n=e.appendChild(Object(o.c)("div","technologies")),l=await Object(c.c)();let s="",r="";const d=e=>{console.log(e.target.name,e.target.value),s=e.target.value};l.forEach((e,a)=>{let l=Object(o.c)("img","tech-icon");if(l.src=`src/img/${e.icon_url}`,n.appendChild(l),t&&t.isAdmin){let t=Object(o.c)("div","name");t.innerText=e.name;const a=Object(i.c)("tech-icon-form"),l=Object(i.d)({className:"techIconInput",name:e.name,type:"text",value:e.icon_url,placeholder:"tech-icon-url",handleChange:d});a.appendChild(l),a.appendChild(t),n.appendChild(a);const r=Object(i.a)("update-tech-icon-btn","submit","update icon url");a.addEventListener("submit",t=>{console.log(e.id),((e,t,n)=>{e.preventDefault(),Object(c.d)(t,n)})(t,{...e,icon_url:s},e.id)}),a.appendChild(r);const h=Object(i.a)("delete-tech-btn","submit");h.innerText="delete",h.addEventListener("click",()=>{console.log("test"),Object(c.b)(e.id)}),a.appendChild(h)}});const h=Object(i.c)("add-tech-icon-form"),u=Object(i.d)({className:"name",name:"nameInput",type:"text",value:"",placeholder:"new technology",handleChange:d}),p=Object(i.d)({className:"techIconInput",name:"input",type:"text",value:s,placeholder:"tech-icon-url",handleChange:e=>{console.log(e.target.name,e.target.value),r=e.target.value}});n.appendChild(h);const g=Object(i.a)("new-tech-icon-btn","submit","new icon url");return h.addEventListener("submit",async e=>{console.log(s);await((e,t)=>{e.preventDefault(),Object(c.a)(t)})(e,{name:r,icon_url:s})}),h.appendChild(g),h.appendChild(p),h.appendChild(u),e}},96:function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));const o=()=>"https://portfolio-mick-server.herokuapp.com"},97:function(e,t,n){"use strict";n.d(t,"c",(function(){return c})),n.d(t,"a",(function(){return i})),n.d(t,"d",(function(){return l})),n.d(t,"b",(function(){return s}));var o=n(96);const a=Object(o.a)();const c=async e=>(console.log(JSON.stringify(e)),await fetch(a+"/users",{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}).then(e=>e.json()).then(e=>(localStorage.setItem("authToken",e.token),e))),i=async e=>{console.log(e);let t=await fetch(a+"/auth/login",{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}).then(e=>e.json()).then(e=>(localStorage.setItem("authToken",e.token),e));return console.log(t),t},l=async()=>{if(localStorage.getItem("authToken")){return await fetch(a+"/auth/verify",{method:"get",headers:(e={"Content-Type":"application/json"},localStorage.authToken?{...e,Authorization:`Bearer ${localStorage.authToken}`}:e)}).then(e=>e.json()).then(e=>e)}var e;return!1},s=async()=>(localStorage.removeItem("authToken"),{"Content-Type":"application/json"},"logged out")},99:function(e,t,n){"use strict";n.d(t,"c",(function(){return c})),n.d(t,"a",(function(){return i})),n.d(t,"d",(function(){return l})),n.d(t,"b",(function(){return s}));var o=n(96);const a=Object(o.a)();let c=async()=>await fetch(`${a}/technologies`).then(e=>e.json()).then(e=>e),i=async e=>await fetch(`${a}/technologies`,{method:"post",body:JSON.stringify(e),headers:{"Content-Type":"application/json"}}).then(e=>e.json()).then(e=>e);const l=async(e,t)=>{await fetch(`${a}/technologies/${t}`,{method:"put",body:JSON.stringify(e),headers:{"Content-Type":"application/json"}}).then(e=>e.json()).then(e=>e)},s=async e=>{await fetch(`${a}/technologies/${e}`,{method:"delete",headers:{"Content-Type":"application/json"}}).then(e=>e).then(e=>e)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,