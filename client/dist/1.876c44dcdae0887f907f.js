(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{83:function(e,t,c){"use strict";c.d(t,"a",(function(){return o}));var n=c(4);const a=Object(n.a)();let o=async e=>await fetch(`${a}/technologies`).then(e=>e.json()).then(e=>e)},84:function(e,t,c){"use strict";c.d(t,"c",(function(){return o})),c.d(t,"a",(function(){return i})),c.d(t,"d",(function(){return s})),c.d(t,"b",(function(){return l}));var n=c(4);const a=Object(n.a)();let o=async()=>await fetch(`${a}/projects`).then(e=>e.json()).then(e=>e);const i=async e=>{console.log("ere"),console.log(JSON.stringify(e));const t=await fetch(`${a}/projects`,{method:"post",body:JSON.stringify(e),headers:{"Content-Type":"application/json"}}).then(e=>e.json()).then(e=>e);console.log(t)},s=async(e,t)=>{console.log(JSON.stringify(e));await fetch(`${a}/projects/${t}`,{method:"put",body:JSON.stringify(e),headers:{"Content-Type":"application/json"}}).then(e=>e.json()).then(e=>e)},l=async e=>{const t=await fetch(`${a}/projects/${e}`,{method:"delete",headers:{"Content-Type":"application/json"}}).then(e=>e.json()).then(e=>e);console.log(t)}},87:function(e,t,c){"use strict";c.r(t),c.d(t,"Projects",(function(){return p}));var n=c(0),a=c(7),o=(c(83),c(82)),i=c(3),s=c(84),l=c(5),d=c(90);c(91);const r=e=>{for(;e.childNodes.length;)e.removeChild(e.lastChild)};async function p(){let e=Object(n.e)(".main-content-scrollable");r(e),e.appendChild(Object(n.c)("div","loading")).innerHTML="loading...";const t=await Object(s.c)();r(e);const c=e.clientWidth;if(t.forEach(async(t,i)=>{let r=e.appendChild(Object(n.c)("div","project-wrap")),h=r.appendChild(Object(o.a)(`src/img/${t.img_url}`,t.name,!0,t.site_url));console.log(h);let b="false",j=Object(n.c)("div","link-modal"),u=Object(n.f)(".img-wrapper"),m=Object(n.f)(".inner-img-wrap"),f=Object(n.c)("div","tech-icons");t.technologies.forEach(e=>{f.appendChild(Object(n.c)("img","tech-icon")).src=`src/img/${e.icon_url}`});let g=Object(n.c)("div","description");if(g.innerHTML=t.description,c<900?(j.appendChild(f),j.appendChild(g)):(j.appendChild(g),j.appendChild(f)),j.appendChild(Object(n.c)("div","link-modal-icons")).innerHTML=`<div><a href=${t.site_url} target='_blank'><i class="fas fa-home fa-fw"></i></a>\n    <p class='home-tool-tip'>website</p></div>\n\n    <div><a href=${t.github_url} target='_blank'><i class="fab fa-github"></i></a>\n    <p class='github-tool-tip'>github</p></div>`,console.log(m[0].children[1]),u[i].addEventListener("click",async()=>{if("true"===b)b="false",m[i].classList.add("close-curtain"),m[i].classList.remove("open-curtain"),u[i].lastChild.remove(),u[i].style.width="80%",u[i].style.padding="6%",u[i].style.margin="0",r.style.margin="0 10% 3% 10%",m[i].style.width="100%",r.classList.remove("project-wrap-click"),h.lastChild.remove();else if("false"===b){console.log(b),b="true",m[i].classList.add("open-curtain"),m[i].classList.remove("close-curtain"),u[i].appendChild(j),c<900?(u[i].style.flexDirection="column",j.style.width="90%",f.style.width="80%",j.style.marginTop="5%",j.style.background="rgb(240, 253, 253)"):(u[i].style.width="90%",u[i].style.padding="2%",u[i].style.margin="0 auto",r.style.margin="0 1%",m[i].style.width="99%",m[i].style.height="99%"),c<900?(console.log("900-"),h.appendChild(f)):(console.log("900+"),m[i].appendChild(f)),console.log(h),u[i].style.setProperty("--animation","animate-img-wrapper 1.5s linear forwards"),r.classList.add("project-wrap-click")}}),await Object(a.d)()){const e=Object(n.c)("div","edit-project-wrapper"),c=Object(l.a)("show-edit-button","submit","update");c.addEventListener("click",()=>{console.log(r.lastChild.className),"edit-project-form"!==r.lastChild.className?Object(d.EditProject)(r,t):r.lastChild.remove()}),e.appendChild(c);const a=Object(l.a)("delete-project","submit","delete");a.addEventListener("click",async()=>{let e=confirm(`Are you sure you want to delete ${t.name}?`);e&&await Object(s.b)(t.id),e&&await p()}),e.appendChild(a),r.appendChild(e)}}),await Object(a.d)()){let c=Object(l.a)("show-add-form","submit","add project");c.addEventListener("click",()=>{console.log(e.lastChild.className),"show-add-form"===e.lastChild.className?Object(d.EditProject)(e,t[0],"addProject"):e.lastChild.remove()}),Object(n.b)(e,c)}e.appendChild(Object(i.a)())}},90:function(e,t,c){"use strict";c.r(t),c.d(t,"EditProject",(function(){return l}));var n=c(5),a=c(83),o=c(84),i=c(87),s=c(0);const l=async(e,t,c)=>{if(console.log("add",c),"addProject"===c)for(let e in t)t[e]="";let l={},d=e=>{console.log(e.target.name),l[e.target.name]=e.target.value},r=Object(n.c)("edit-project-form"),p=Object(s.c)("div","edit-form-inputs");r.appendChild(p),Object.keys(t).forEach(e=>{if("id"!==e&&"technologies"!==e&&"created_at"!==e&&"updated_at"!==e){l[e]=t[e];const a=Object(n.d)({className:"edit-form-input",name:e,type:"text",value:"addProject"===c?"":l[e],placeholder:e,handleChange:d});p.appendChild(a)}});const h=Object(s.c)("div","edit-form-checkboxes");r.appendChild(h),(await Object(a.a)()).map(e=>{let a;void 0===c&&t.technologies.forEach(t=>{e.name===t.name&&(console.log(e.name,t.name),a="checked")});let o=Object(n.b)({className:"edit-project-chkbox",name:e.name,id:e.name,value:e.id,checked:"addProject"===c?"":a});h.appendChild(o),h.appendChild(Object(n.e)("tech-box-label",e.name,"tech-box"))}),r.appendChild(Object(n.a)("edit-project-button","submit","addProject"===c?"add new project":"submit")),Object(s.b)(e,r),r.addEventListener("submit",async e=>{e.preventDefault(),console.log("add",c);const n=document.querySelectorAll("input[type=checkbox]:checked");console.log(n),l.technologies=[],n.forEach(e=>{l.technologies.push(e.value)}),console.log("add",l),"addProject"===c?await Object(o.a)(l):await Object(o.d)(l,t.id),await Object(i.Projects)()})}},91:function(e,t,c){var n=c(1),a=c(92);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.i,a,""]]);var o={insert:"head",singleton:!1},i=(n(a,o),a.locals?a.locals:{});e.exports=i},92:function(e,t,c){}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,