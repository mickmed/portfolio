(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{101:function(e,t,n){"use strict";n.r(t),n.d(t,"EditProject",(function(){return l}));var o=n(3),a=n(92),c=n(95),i=n(98),s=n(0);const l=async(e,t,n)=>{if(console.log("add",n),"addProject"===n)for(let e in t)t[e]="";let l={},d=e=>{console.log(e.target.name,e.target.value),l[e.target.name]=e.target.value,console.log("cmon",l)},r=Object(o.c)("edit-project-form"),p=Object(s.c)("div","edit-form-inputs");r.appendChild(p),Object.keys(t).forEach(e=>{if("id"!==e&&"technologies"!==e&&"created_at"!==e&&"updated_at"!==e){l[e]=t[e];const a=Object(o.d)({className:"edit-form-input",name:e,type:"text",value:"addProject"===n?"":l[e],placeholder:e,handleChange:d});p.appendChild(a)}});const h=Object(s.c)("div","edit-form-checkboxes");r.appendChild(h),(await Object(a.a)()).map(e=>{let a;void 0===n&&t.technologies.forEach(t=>{e.name===t.name&&(console.log(e.name,t.name),a="checked")});let c=Object(o.b)({className:"edit-project-chkbox",name:e.name,id:e.name,value:e.id,checked:"addProject"===n?"":a});h.appendChild(c),h.appendChild(Object(o.e)("tech-box-label",e.name,"tech-box"))}),r.appendChild(Object(o.a)("edit-project-button","submit","addProject"===n?"add new project":"submit")),Object(s.b)(e,r),r.addEventListener("submit",async e=>{e.preventDefault(),console.log("add",n);const o=document.querySelectorAll("input[type=checkbox]:checked");console.log(o,l),l.technologies=[],o.forEach(e=>{l.technologies.push(e.value)}),console.log("add",l),"addProject"===n?await Object(c.a)(l):await Object(c.d)(l,t.id),await Object(i.Projects)()})}},102:function(e,t,n){var o=n(1),a=n(103);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.i,a,""]]);var c={insert:"head",singleton:!1},i=(o(a,c),a.locals?a.locals:{});e.exports=i},103:function(e,t,n){},91:function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));const o=()=>"https://portfolio-mick-server.herokuapp.com"},92:function(e,t,n){"use strict";n.d(t,"a",(function(){return c})),n.d(t,"b",(function(){return i}));var o=n(91);const a=Object(o.a)();let c=async()=>await fetch(`${a}/technologies`).then(e=>e.json()).then(e=>e);const i=async(e,t)=>{await fetch(`${a}/technologies/${t}`,{method:"put",body:JSON.stringify(e),headers:{"Content-Type":"application/json"}}).then(e=>e.json()).then(e=>e)}},93:function(e,t,n){"use strict";n.d(t,"c",(function(){return c})),n.d(t,"a",(function(){return i})),n.d(t,"d",(function(){return s})),n.d(t,"b",(function(){return l}));var o=n(91);const a=Object(o.a)();const c=async e=>(console.log(JSON.stringify(e)),await fetch(a+"/users",{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}).then(e=>e.json()).then(e=>(localStorage.setItem("authToken",e.token),e))),i=async e=>await fetch(a+"/auth/login",{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}).then(e=>e.json()).then(e=>(localStorage.setItem("authToken",e.token),e)),s=async()=>{if(localStorage.getItem("authToken")){return await fetch(a+"/auth/verify",{method:"get",headers:(e={"Content-Type":"application/json"},localStorage.authToken?{...e,Authorization:`Bearer ${localStorage.authToken}`}:e)}).then(e=>e.json()).then(e=>e)}var e;return!1},l=async()=>(localStorage.removeItem("authToken"),{"Content-Type":"application/json"},"logged out")},95:function(e,t,n){"use strict";n.d(t,"c",(function(){return c})),n.d(t,"a",(function(){return i})),n.d(t,"d",(function(){return s})),n.d(t,"b",(function(){return l}));var o=n(91);const a=Object(o.a)();let c=async()=>await fetch(`${a}/projects`).then(e=>e.json()).then(e=>e);const i=async e=>{const t=await fetch(`${a}/projects`,{method:"post",body:JSON.stringify(e),headers:{"Content-Type":"application/json"}}).then(e=>e.json()).then(e=>e);console.log(t)},s=async(e,t)=>{await fetch(`${a}/projects/${t}`,{method:"put",body:JSON.stringify(e),headers:{"Content-Type":"application/json"}}).then(e=>e.json()).then(e=>e)},l=async e=>{const t=await fetch(`${a}/projects/${e}`,{method:"delete",headers:{"Content-Type":"application/json"}}).then(e=>e.json()).then(e=>e);console.log(t)}},98:function(e,t,n){"use strict";n.r(t),n.d(t,"Projects",(function(){return p}));var o=n(0),a=n(93),c=(n(92),n(94)),i=n(4),s=n(95),l=n(3),d=n(101);n(102);const r=e=>{for(;e.childNodes.length;)e.removeChild(e.lastChild)};async function p(){const e=Object(o.e)(".scrollable-content");r(e),e.appendChild(Object(o.c)("div","loading")).innerHTML="loading...";const t=await Object(s.c)();r(e);const n=e.clientWidth;if(t.forEach(async(t,i)=>{const r=e.appendChild(Object(o.c)("div","project-wrap")),h=r.appendChild(Object(c.a)(`src/img/${t.img_url}`,t.name,!0,t.site_url,t.build_date));console.log(h);let u="false",j=Object(o.c)("div","link-modal"),b=Object(o.f)(".img-wrapper"),f=Object(o.f)(".inner-img-wrap"),g=Object(o.c)("div","tech-icons");t.technologies.forEach(e=>{g.appendChild(Object(o.c)("img","tech-icon")).src=`src/img/${e.icon_url}`});let m=Object(o.c)("div","description");if(m.innerHTML=t.description,n<900?(j.appendChild(g),j.appendChild(m)):(j.appendChild(m),j.appendChild(g)),j.appendChild(Object(o.c)("div","link-modal-icons")).innerHTML=`<div><a href=${t.site_url} target='_blank'><i class="fas fa-home fa-fw"></i></a>\n    <p class='home-tool-tip'>website</p></div>\n\n    <div><a href=${t.github_url} target='_blank'><i class="fab fa-github"></i></a>\n    <p class='github-tool-tip'>github</p></div>`,console.log(f[0].children[1]),b[i].addEventListener("click",async()=>{if("true"===u)u="false",f[i].classList.add("close-curtain"),f[i].classList.remove("open-curtain"),b[i].lastChild.remove(),b[i].style.width="80%",b[i].style.padding="6%",b[i].style.margin="0",r.style.margin="0 10% 3% 10%",f[i].style.width="100%",r.classList.remove("project-wrap-click"),h.lastChild.remove();else if("false"===u){console.log(u),u="true",f[i].classList.add("open-curtain"),f[i].classList.remove("close-curtain"),b[i].appendChild(j),n<900?(b[i].style.flexDirection="column",j.style.width="90%",g.style.width="80%",j.style.marginTop="5%",j.style.background="rgb(240, 253, 253)"):(b[i].style.width="90%",b[i].style.padding="2%",b[i].style.margin="0 auto",r.style.margin="0 1%",f[i].style.width="99%",f[i].style.height="99%"),n<900?(console.log("900-"),h.appendChild(g)):(console.log("900+"),f[i].appendChild(g)),console.log(h),b[i].style.setProperty("--animation","animate-img-wrapper 1.5s linear forwards"),r.classList.add("project-wrap-click")}}),await Object(a.d)()){const e=Object(o.c)("div","edit-project-wrapper"),n=Object(l.a)("show-edit-button","submit","update");n.addEventListener("click",()=>{console.log(r.lastChild.className),"edit-project-form"!==r.lastChild.className?Object(d.EditProject)(r,t):r.lastChild.remove()}),e.appendChild(n);const a=Object(l.a)("delete-project","submit","delete");a.addEventListener("click",async()=>{let e=confirm(`Are you sure you want to delete ${t.name}?`);e&&await Object(s.b)(t.id),e&&await p()}),e.appendChild(a),r.appendChild(e)}}),await Object(a.d)()){let n=Object(l.a)("show-add-form","submit","add project");n.addEventListener("click",()=>{console.log(e.lastChild.previousSibling.className),"show-add-form"===e.lastChild.previousSibling.className?Object(d.EditProject)(e,t[0],"addProject"):e.lastChild.remove()}),Object(o.b)(e,n)}e.appendChild(Object(i.a)())}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,