(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{101:function(e,n,t){"use strict";t.r(n),t.d(n,"Resume",(function(){return l}));t(82);var i=t(0),c=t(3),o=t(4);t(95),t(85);Object(o.a)();async function l(){console.log("pdf");let e=Object(i.e)(".main-content-scrollable");for(;e.childNodes.length;)e.removeChild(e.lastChild);Object(i.c)("img","img").src="src/img/mam_logo.png",e.innerHTML="\n  <a class='resume-pdf' href='/src/img/mickrothresume.pdf'>hi</a>\n\n\n",e.appendChild(Object(c.a)())}console.log(Object(o.a)())},82:function(e,n,t){"use strict";t.d(n,"a",(function(){return c}));var i=t(0);t(83);const c=(e,n,t,c)=>{let o=Object(i.c)("div","project-img"),l=Object(i.c)("div","img-wrapper");o.appendChild(l);let s=Object(i.c)("div","inner-img-wrap");if(l.appendChild(s),s.appendChild(Object(i.c)("img","img")).src=e,!0===t){let e=s.appendChild(Object(i.c)("div","modal"));e.classList.add("project-modal","modal-slide");e.appendChild(Object(i.c)("span","modal-span")),e.childNodes[0].appendChild(Object(i.c)("h2","project-title"));e.childNodes[0].childNodes[0].innerText=n}return o}},83:function(e,n,t){var i=t(1),c=t(84);"string"==typeof(c=c.__esModule?c.default:c)&&(c=[[e.i,c,""]]);var o={insert:"head",singleton:!1},l=(i(c,o),c.locals?c.locals:{});e.exports=l},84:function(e,n,t){},85:function(e,n,t){var i=t(1),c=t(86);"string"==typeof(c=c.__esModule?c.default:c)&&(c=[[e.i,c,""]]);var o={insert:"head",singleton:!1},l=(i(c,o),c.locals?c.locals:{});e.exports=l},86:function(e,n,t){},95:function(e,n,t){var i=t(1),c=t(96);"string"==typeof(c=c.__esModule?c.default:c)&&(c=[[e.i,c,""]]);var o={insert:"head",singleton:!1},l=(i(c,o),c.locals?c.locals:{});e.exports=l},96:function(e,n,t){}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,