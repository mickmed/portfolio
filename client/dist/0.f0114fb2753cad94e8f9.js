(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{82:function(e,t,c){"use strict";c.d(t,"a",(function(){return a}));var n=c(0);c(83);const a=(e,t,c,a)=>{let o=Object(n.c)("div","project-img"),i=Object(n.c)("div","img-wrapper");o.appendChild(i);let d=Object(n.c)("div","inner-img-wrap");if(i.appendChild(d),d.appendChild(Object(n.c)("img","img")).src=e,!0===c){let e=d.appendChild(Object(n.c)("div","modal"));e.classList.add("project-modal","modal-slide");e.appendChild(Object(n.c)("span","modal-span")),e.childNodes[0].appendChild(Object(n.c)("h2","project-title"));e.childNodes[0].childNodes[0].innerText=t}return o}},83:function(e,t,c){var n=c(1),a=c(84);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.i,a,""]]);var o={insert:"head",singleton:!1},i=(n(a,o),a.locals?a.locals:{});e.exports=i},84:function(e,t,c){},87:function(e,t,c){"use strict";c.d(t,"a",(function(){return o}));var n=c(5);const a=Object(n.a)();let o=async e=>await fetch(`${a}/technologies`).then(e=>e.json()).then(e=>e)},88:function(e,t,c){"use strict";c.d(t,"c",(function(){return o})),c.d(t,"a",(function(){return i})),c.d(t,"d",(function(){return d})),c.d(t,"b",(function(){return s}));var n=c(5);const a=Object(n.a)();let o=async()=>await fetch(`${a}/projects`).then(e=>e.json()).then(e=>e);const i=async e=>{console.log("ere"),console.log(JSON.stringify(e));const t=await fetch(`${a}/projects`,{method:"post",body:JSON.stringify(e),headers:{"Content-Type":"application/json"}}).then(e=>e.json()).then(e=>e);console.log(t)},d=async(e,t)=>{console.log(JSON.stringify(e));await fetch(`${a}/projects/${t}`,{method:"put",body:JSON.stringify(e),headers:{"Content-Type":"application/json"}}).then(e=>e.json()).then(e=>e)},s=async e=>{const t=await fetch(`${a}/projects/${e}`,{method:"delete",headers:{"Content-Type":"application/json"}}).then(e=>e.json()).then(e=>e);console.log(t)}},91:function(e,t,c){"use strict";c.r(t),c.d(t,"Projects",(function(){return p}));var n=c(0),a=c(7),o=(c(87),c(82)),i=c(3),d=c(88),s=c(4),l=c(92);c(93);const r=e=>{for(;e.childNodes.length;)e.removeChild(e.lastChild)};async function p(){let e=Object(n.e)(".main-content-scrollable");r(e),e.appendChild(Object(n.c)("div","loading")).innerHTML="loading...";const t=await Object(d.c)();r(e);const c=e.clientHeight;if(console.log(c),t.forEach(async(t,c)=>{let i=e.appendChild(Object(n.c)("div","project-wrap")),r=(i.appendChild(Object(o.a)(`src/img/${t.img_url}`,t.name,!0,t.site_url)),"false"),h=Object(n.c)("div","link-modal"),j=Object(n.f)(".img-wrapper"),u=Object(n.f)(".inner-img-wrap"),b=Object(n.c)("div","tech-icons");t.technologies.forEach(e=>{b.appendChild(Object(n.c)("img","tech-icon")).src=`src/img/${e.icon_url}`}),h.appendChild(b);let f=h.appendChild(Object(n.c)("div","link-modal-icons"));if(f.innerHTML=`<a href=${t.site_url} target='_blank'><i class="fas fa-home fa-fw"></i></a>`,j[c].addEventListener("click",async()=>{if("true"===r)r="false",u[c].classList.add("close-curtain"),u[c].classList.remove("open-curtain"),j[c].lastChild.remove();else if("false"===r){r="true",u[c].classList.add("open-curtain"),u[c].classList.remove("close-curtain"),j[c].appendChild(h),j[c].style.setProperty("--animation","animate-img-wrapper 1.5s linear forwards"),u[c].appendChild(f)}}),await Object(a.d)()){const e=Object(n.c)("div","edit-project-wrapper"),c=Object(s.a)("show-edit-button","submit","update");c.addEventListener("click",()=>{console.log(i.lastChild.className),"edit-project-form"!==i.lastChild.className?Object(l.EditProject)(i,t):i.lastChild.remove()}),e.appendChild(c);const a=Object(s.a)("delete-project","submit","delete");a.addEventListener("click",async()=>{let e=confirm(`Are you sure you want to delete ${t.name}?`);e&&await Object(d.b)(t.id),e&&await p()}),e.appendChild(a),i.appendChild(e)}}),await Object(a.d)()){let c=Object(s.a)("show-add-form","submit","add project");c.addEventListener("click",()=>{console.log(e.lastChild.className),"show-add-form"===e.lastChild.className?Object(l.EditProject)(e,t[0],"addProject"):e.lastChild.remove()}),Object(n.b)(e,c)}e.appendChild(Object(i.a)())}},92:function(e,t,c){"use strict";c.r(t),c.d(t,"EditProject",(function(){return s}));var n=c(4),a=c(87),o=c(88),i=c(91),d=c(0);const s=async(e,t,c)=>{if(console.log("add",c),"addProject"===c)for(let e in t)t[e]="";let s={},l=e=>{s[e.target.name]=e.target.value},r=Object(n.c)("edit-project-form"),p=Object(d.c)("div","edit-form-inputs");r.appendChild(p),Object.keys(t).forEach(e=>{if("id"!==e&&"technologies"!==e&&"created_at"!==e&&"updated_at"!==e){s[e]=t[e];const a=Object(n.d)({className:"edit-form-input",name:e,type:"text",value:"addProject"===c?"":s[e],placeholder:e,handleChange:l});p.appendChild(a)}});const h=Object(d.c)("div","edit-form-checkboxes");r.appendChild(h),(await Object(a.a)()).map(e=>{let a;void 0===c&&t.technologies.forEach(t=>{e.name===t.name&&(console.log(e.name,t.name),a="checked")});let o=Object(n.b)({className:"edit-project-chkbox",name:e.name,id:e.name,value:e.id,checked:"addProject"===c?"":a});h.appendChild(o),h.appendChild(Object(n.e)("tech-box-label",e.name,"tech-box"))}),r.appendChild(Object(n.a)("edit-project-button","submit","addProject"===c?"add new project":"submit")),Object(d.b)(e,r),r.addEventListener("submit",async e=>{e.preventDefault(),console.log("add",c);const n=document.querySelectorAll("input[type=checkbox]:checked");console.log(n),s.technologies=[],n.forEach(e=>{s.technologies.push(e.value)}),console.log("add",s),"addProject"===c?await Object(o.a)(s):await Object(o.d)(s,t.id),await Object(i.Projects)()})}},93:function(e,t,c){var n=c(1),a=c(94);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.i,a,""]]);var o={insert:"head",singleton:!1},i=(n(a,o),a.locals?a.locals:{});e.exports=i},94:function(e,t,c){}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,