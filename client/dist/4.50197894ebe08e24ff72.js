(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{117:function(t,e,n){var o=n(1),a=n(118);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[t.i,a,""]]);var l={insert:"head",singleton:!1},i=(o(a,l),a.locals?a.locals:{});t.exports=i},118:function(t,e,n){},125:function(t,e,n){"use strict";n.r(e),n.d(e,"Signup",(function(){return l}));var o=n(95),a=n(0);n(117);const l=async()=>{let t=Object(a.e)(".main-content-scrollable");for(;t.childNodes.length>1;)t.removeChild(t.lastChild);let e={};const n=Object(a.c)("div","sign-up"),l=Object(a.c)("form","login-form");["username","email","password"].map(t=>{let n=l.appendChild(Object(a.c)("label","login-label"));n.setAttribute("for",t),n.innerText=t;let o=l.appendChild(Object(a.c)("input",`login-${t}`));o.setAttribute("id",t),o.setAttribute("name",t),o.addEventListener("keyup",t=>{e[t.target.name]=t.target.value,console.log(t.target.value,e)})});let i=await Object(o.d)();console.log(i),i.errors&&(console.log("logout due to error"),Object(o.b)());const c=Object(a.c)("button","submit-login");c.innerText="signUp",l.appendChild(c),l.addEventListener("submit",async t=>{t.preventDefault(),console.log("body",e);let n=await Object(o.c)(e);console.log(n)});const s=Object(a.c)("button","login");s.classList.add("login-btn"),s.innerText=i?"logout":"login",s.addEventListener("click",async()=>{if(console.log(i),i||0===Object.keys(e).length||localStorage.authToken){let t=await Object(o.b)();console.log(t),"logged out"===t&&(s.innerText="login")}else{e={auth:{...e}};await Object(o.a)(e);i=await Object(o.d)(),console.log(i),s.innerText=i&&"logout"}}),n.appendChild(l),n.appendChild(s),t.appendChild(n)}},94:function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));const o=()=>"https://portfolio-mick-server.herokuapp.com"},95:function(t,e,n){"use strict";n.d(e,"c",(function(){return l})),n.d(e,"a",(function(){return i})),n.d(e,"d",(function(){return c})),n.d(e,"b",(function(){return s}));var o=n(94);const a=Object(o.a)();const l=async t=>(console.log(JSON.stringify(t)),await fetch(a+"/users",{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}).then(t=>t.json()).then(t=>(localStorage.setItem("authToken",t.token),t))),i=async t=>{console.log(t);let e=await fetch(a+"/auth/login",{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}).then(t=>t.json()).then(t=>(localStorage.setItem("authToken",t.token),t));return console.log(e),e},c=async()=>{if(localStorage.getItem("authToken")){return await fetch(a+"/auth/verify",{method:"get",headers:(t={"Content-Type":"application/json"},localStorage.authToken?{...t,Authorization:`Bearer ${localStorage.authToken}`}:t)}).then(t=>t.json()).then(t=>t)}var t;return!1},s=async()=>(localStorage.removeItem("authToken"),{"Content-Type":"application/json"},"logged out")}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,