(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{107:function(e,n,t){"use strict";t.r(n),t.d(n,"Lessons",(function(){return s}));var o=t(0),i=t(3);t(98);async function s(){const e=await Object(o.e)(".main-content-scrollable");for(console.log(e);e.childNodes.length;)e.removeChild(e.lastChild);const n=e.clientWidth;let t,s;console.log(n),n>600&&n<900?(t=480,s=299):n>900&&n<1200?(t=960,s=569):n>1200&&(t=1440,s=839);const d=Object(o.c)("div","linked-lists");d.innerHTML="<div><h3>Linked Lists</h3>\n            <p>Slide 1) The unshift method calls the Node class and adds a new node to the beginning of the linked list. We can see that as each new node is created <i>this.next</i> points to the following node.</p>\n        </div>";const l=Object(o.c)("a","link");l.href="https://docs.google.com/presentation/d/e/2PACX-1vTDsnjcpJ49de8trQkESBQbLFeeqywV_VJB_mgb5l1oqsaLTs5Rp8rS-XbDhjFeJDpqrNuZ34GGCabs/embed?start=false&loop=false&delayms=3000",l.innerHTML="link to orginal document",l.target="_blank";const a=Object(o.c)("div","doc-wrapper"),c=Object(o.c)("iframe","slides");c.src="https://docs.google.com/presentation/d/e/2PACX-1vTDsnjcpJ49de8trQkESBQbLFeeqywV_VJB_mgb5l1oqsaLTs5Rp8rS-XbDhjFeJDpqrNuZ34GGCabs/embed?start=false&loop=false&delayms=3000",c.frameborder="0",c.allowfullscreen="true",c.mozallowfullscreen="true",c.webkitallowfullscreen="true",a.appendChild(c);const p=Object(o.c)("div","linked-lists");p.innerHTML="<div>\n            <p>Slide 2) The push method calls the node class and adds a new node to the end of the linked list. The <i>this.next</i> property of the previous node points to our new node.</p>\n            <p>Slide 3) The insertAt method adds a new node to the specified position in the list. The <i>this.next</i> property of the previous node points to our new node.</p>\n            <p>Slide 4) The getAt method retrieves the given node at the given index.</p>\n            <p>Slide 5) The deleteAt removes a given node at the given index.</p>\n        </div>",e.appendChild(d),e.appendChild(l),e.appendChild(a),e.appendChild(p),e.appendChild(Object(i.a)())}},98:function(e,n,t){var o=t(1),i=t(99);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var s={insert:"head",singleton:!1},d=(o(i,s),i.locals?i.locals:{});e.exports=d},99:function(e,n,t){}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQ29tcG9uZW50cy9MZXNzb25zL0xlc3NvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbXBvbmVudHMvTGVzc29ucy9MZXNzc29ucy5zY3NzPzY0NDkiXSwibmFtZXMiOlsiYXN5bmMiLCJMZXNzb25zIiwibWFpbkNvbnRlbnRTY3JvbGxhYmxlIiwiY29uc29sZSIsImxvZyIsImNoaWxkTm9kZXMiLCJsZW5ndGgiLCJyZW1vdmVDaGlsZCIsImxhc3RDaGlsZCIsIndpZHRoIiwiY2xpZW50V2lkdGgiLCJmcmFtZVdpZHRoIiwiZnJhbWVIZWlnaHQiLCJsaW5rTGlzdCIsImlubmVySFRNTCIsImxpbmsiLCJocmVmIiwidGFyZ2V0IiwiZG9jV3JhcHBlciIsImRvYyIsInNyYyIsImZyYW1lYm9yZGVyIiwiYWxsb3dmdWxsc2NyZWVuIiwibW96YWxsb3dmdWxsc2NyZWVuIiwid2Via2l0YWxsb3dmdWxsc2NyZWVuIiwiYXBwZW5kQ2hpbGQiLCJsaW5rTGlzdDIiLCJhcGkiLCJjb250ZW50IiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJtb2R1bGUiLCJpIiwib3B0aW9ucyIsImV4cG9ydGVkIiwibG9jYWxzIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6ImlLQU1PQSxlQUFlQyxJQUdsQixNQUFNQyxRQUE4QixZQUFHLDRCQUV2QyxJQURBQyxRQUFRQyxJQUFJRixHQUNMQSxFQUFzQkcsV0FBV0MsUUFDcENKLEVBQXNCSyxZQUFZTCxFQUFzQk0sV0FHNUQsTUFBTUMsRUFBUVAsRUFBc0JRLFlBRXBDLElBQUlDLEVBQVlDLEVBRGhCVCxRQUFRQyxJQUFJSyxHQUVSQSxFQUFRLEtBQU9BLEVBQVEsS0FDdkJFLEVBQWEsSUFDYkMsRUFBYyxLQUVQSCxFQUFRLEtBQU9BLEVBQVEsTUFDOUJFLEVBQWEsSUFDYkMsRUFBYyxLQUdQSCxFQUFRLE9BQ2ZFLEVBQWEsS0FDYkMsRUFBYyxLQUdsQixNQUFNQyxFQUFXLFlBQUssTUFBTyxnQkFDN0JBLEVBQVNDLFVBQ0wsc1FBSUosTUFBTUMsRUFBTyxZQUFLLElBQUssUUFDdkJBLEVBQUtDLEtBQU8sNEtBQ1pELEVBQUtELFVBQVksMkJBQ2pCQyxFQUFLRSxPQUFTLFNBRWQsTUFBTUMsRUFBYSxZQUFLLE1BQU8sZUFDekJDLEVBQU0sWUFBSyxTQUFVLFVBQzNCQSxFQUFJQyxJQUFNLDRLQUNWRCxFQUFJRSxZQUFjLElBQ2xCRixFQUFJRyxnQkFBa0IsT0FDdEJILEVBQUlJLG1CQUFxQixPQUN6QkosRUFBSUssc0JBQXdCLE9BQzVCTixFQUFXTyxZQUFZTixHQUV2QixNQUFNTyxFQUFZLFlBQUssTUFBTyxnQkFDOUJBLEVBQVVaLFVBQ04seWpCQU9KWixFQUFzQnVCLFlBQVlaLEdBQ2xDWCxFQUFzQnVCLFlBQVlWLEdBQ2xDYixFQUFzQnVCLFlBQVlQLEdBQ2xDaEIsRUFBc0J1QixZQUFZQyxHQUNsQ3hCLEVBQXNCdUIsWUFBWSxpQixtQkNqRXRDLElBQUlFLEVBQU0sRUFBUSxHQUNGQyxFQUFVLEVBQVEsSUFJQyxpQkFGdkJBLEVBQVVBLEVBQVFDLFdBQWFELEVBQVFFLFFBQVVGLEtBRy9DQSxFQUFVLENBQUMsQ0FBQ0csRUFBT0MsRUFBSUosRUFBUyxNQUc5QyxJQUFJSyxFQUFVLENBRWQsT0FBaUIsT0FDakIsV0FBb0IsR0FJaEJDLEdBRlNQLEVBQUlDLEVBQVNLLEdBRVhMLEVBQVFPLE9BQVNQLEVBQVFPLE9BQVMsSUFJakRKLEVBQU9LLFFBQVVGLEciLCJmaWxlIjoiNS4yZWNjNzA1ZmZkNDJkMWZmN2I3Zi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgY2VjbCwgcXMgfSBmcm9tICcuLi9IZWxwZXJzL2RvbUhlbHBlcidcbmltcG9ydCB7IEZvb3RlciB9IGZyb20gJy4uL0Zvb3Rlci9Gb290ZXIuanMnXG5pbXBvcnQgJy4vTGVzc3NvbnMuc2NzcydcblxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gTGVzc29ucygpIHtcblxuXG4gICAgY29uc3QgbWFpbkNvbnRlbnRTY3JvbGxhYmxlID0gYXdhaXQgcXMoXCIubWFpbi1jb250ZW50LXNjcm9sbGFibGVcIik7XG4gICAgY29uc29sZS5sb2cobWFpbkNvbnRlbnRTY3JvbGxhYmxlKVxuICAgIHdoaWxlIChtYWluQ29udGVudFNjcm9sbGFibGUuY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgICAgbWFpbkNvbnRlbnRTY3JvbGxhYmxlLnJlbW92ZUNoaWxkKG1haW5Db250ZW50U2Nyb2xsYWJsZS5sYXN0Q2hpbGQpXG4gICAgfVxuXG4gICAgY29uc3Qgd2lkdGggPSBtYWluQ29udGVudFNjcm9sbGFibGUuY2xpZW50V2lkdGhcbiAgICBjb25zb2xlLmxvZyh3aWR0aClcbiAgICBsZXQgZnJhbWVXaWR0aCwgZnJhbWVIZWlnaHRcbiAgICBpZiAod2lkdGggPiA2MDAgJiYgd2lkdGggPCA5MDApIHtcbiAgICAgICAgZnJhbWVXaWR0aCA9IDQ4MFxuICAgICAgICBmcmFtZUhlaWdodCA9IDI5OVxuXG4gICAgfSBlbHNlIGlmICh3aWR0aCA+IDkwMCAmJiB3aWR0aCA8IDEyMDApIHtcbiAgICAgICAgZnJhbWVXaWR0aCA9IDk2MFxuICAgICAgICBmcmFtZUhlaWdodCA9IDU2OVxuXG5cbiAgICB9IGVsc2UgaWYgKHdpZHRoID4gMTIwMCkge1xuICAgICAgICBmcmFtZVdpZHRoID0gMTQ0MFxuICAgICAgICBmcmFtZUhlaWdodCA9IDgzOVxuICAgIH1cblxuICAgIGNvbnN0IGxpbmtMaXN0ID0gY2VjbCgnZGl2JywgJ2xpbmtlZC1saXN0cycpXG4gICAgbGlua0xpc3QuaW5uZXJIVE1MID1cbiAgICAgICAgYDxkaXY+PGgzPkxpbmtlZCBMaXN0czwvaDM+XG4gICAgICAgICAgICA8cD5TbGlkZSAxKSBUaGUgdW5zaGlmdCBtZXRob2QgY2FsbHMgdGhlIE5vZGUgY2xhc3MgYW5kIGFkZHMgYSBuZXcgbm9kZSB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBsaW5rZWQgbGlzdC4gV2UgY2FuIHNlZSB0aGF0IGFzIGVhY2ggbmV3IG5vZGUgaXMgY3JlYXRlZCA8aT50aGlzLm5leHQ8L2k+IHBvaW50cyB0byB0aGUgZm9sbG93aW5nIG5vZGUuPC9wPlxuICAgICAgICA8L2Rpdj5gXG5cbiAgICBjb25zdCBsaW5rID0gY2VjbCgnYScsICdsaW5rJylcbiAgICBsaW5rLmhyZWYgPSBgaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vcHJlc2VudGF0aW9uL2QvZS8yUEFDWC0xdlREc25qY3BKNDlkZTh0clFrRVNCUWJMRmVlcXl3Vl9WSkJfbWdiNWwxb3FzYUxUczVScDhyUy1YYkRoakZlSkRwcXJOdVozNEdHQ2Ficy9lbWJlZD9zdGFydD1mYWxzZSZsb29wPWZhbHNlJmRlbGF5bXM9MzAwMGBcbiAgICBsaW5rLmlubmVySFRNTCA9ICdsaW5rIHRvIG9yZ2luYWwgZG9jdW1lbnQnXG4gICAgbGluay50YXJnZXQgPSAnX2JsYW5rJ1xuXG4gICAgY29uc3QgZG9jV3JhcHBlciA9IGNlY2woJ2RpdicsICdkb2Mtd3JhcHBlcicpXG4gICAgY29uc3QgZG9jID0gY2VjbCgnaWZyYW1lJywgJ3NsaWRlcycpXG4gICAgZG9jLnNyYyA9IGBodHRwczovL2RvY3MuZ29vZ2xlLmNvbS9wcmVzZW50YXRpb24vZC9lLzJQQUNYLTF2VERzbmpjcEo0OWRlOHRyUWtFU0JRYkxGZWVxeXdWX1ZKQl9tZ2I1bDFvcXNhTFRzNVJwOHJTLVhiRGhqRmVKRHBxck51WjM0R0dDYWJzL2VtYmVkP3N0YXJ0PWZhbHNlJmxvb3A9ZmFsc2UmZGVsYXltcz0zMDAwYFxuICAgIGRvYy5mcmFtZWJvcmRlciA9IFwiMFwiXG4gICAgZG9jLmFsbG93ZnVsbHNjcmVlbiA9IFwidHJ1ZVwiXG4gICAgZG9jLm1vemFsbG93ZnVsbHNjcmVlbiA9IFwidHJ1ZVwiXG4gICAgZG9jLndlYmtpdGFsbG93ZnVsbHNjcmVlbiA9IFwidHJ1ZVwiXG4gICAgZG9jV3JhcHBlci5hcHBlbmRDaGlsZChkb2MpXG5cbiAgICBjb25zdCBsaW5rTGlzdDIgPSBjZWNsKCdkaXYnLCAnbGlua2VkLWxpc3RzJylcbiAgICBsaW5rTGlzdDIuaW5uZXJIVE1MID1cbiAgICAgICAgYDxkaXY+XG4gICAgICAgICAgICA8cD5TbGlkZSAyKSBUaGUgcHVzaCBtZXRob2QgY2FsbHMgdGhlIG5vZGUgY2xhc3MgYW5kIGFkZHMgYSBuZXcgbm9kZSB0byB0aGUgZW5kIG9mIHRoZSBsaW5rZWQgbGlzdC4gVGhlIDxpPnRoaXMubmV4dDwvaT4gcHJvcGVydHkgb2YgdGhlIHByZXZpb3VzIG5vZGUgcG9pbnRzIHRvIG91ciBuZXcgbm9kZS48L3A+XG4gICAgICAgICAgICA8cD5TbGlkZSAzKSBUaGUgaW5zZXJ0QXQgbWV0aG9kIGFkZHMgYSBuZXcgbm9kZSB0byB0aGUgc3BlY2lmaWVkIHBvc2l0aW9uIGluIHRoZSBsaXN0LiBUaGUgPGk+dGhpcy5uZXh0PC9pPiBwcm9wZXJ0eSBvZiB0aGUgcHJldmlvdXMgbm9kZSBwb2ludHMgdG8gb3VyIG5ldyBub2RlLjwvcD5cbiAgICAgICAgICAgIDxwPlNsaWRlIDQpIFRoZSBnZXRBdCBtZXRob2QgcmV0cmlldmVzIHRoZSBnaXZlbiBub2RlIGF0IHRoZSBnaXZlbiBpbmRleC48L3A+XG4gICAgICAgICAgICA8cD5TbGlkZSA1KSBUaGUgZGVsZXRlQXQgcmVtb3ZlcyBhIGdpdmVuIG5vZGUgYXQgdGhlIGdpdmVuIGluZGV4LjwvcD5cbiAgICAgICAgPC9kaXY+YFxuXG4gICAgbWFpbkNvbnRlbnRTY3JvbGxhYmxlLmFwcGVuZENoaWxkKGxpbmtMaXN0KVxuICAgIG1haW5Db250ZW50U2Nyb2xsYWJsZS5hcHBlbmRDaGlsZChsaW5rKVxuICAgIG1haW5Db250ZW50U2Nyb2xsYWJsZS5hcHBlbmRDaGlsZChkb2NXcmFwcGVyKVxuICAgIG1haW5Db250ZW50U2Nyb2xsYWJsZS5hcHBlbmRDaGlsZChsaW5rTGlzdDIpXG4gICAgbWFpbkNvbnRlbnRTY3JvbGxhYmxlLmFwcGVuZENoaWxkKEZvb3RlcigpKVxuXG59IiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vTGVzc3NvbnMuc2Nzc1wiKTtcblxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuX19lc01vZHVsZSA/IGNvbnRlbnQuZGVmYXVsdCA6IGNvbnRlbnQ7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuICAgICAgICAgICAgfVxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxudmFyIGV4cG9ydGVkID0gY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHt9O1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRlZDsiXSwic291cmNlUm9vdCI6IiJ9