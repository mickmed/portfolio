(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{84:function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var c=n(4);const a=Object(c.a)();let o=async e=>await fetch(`${a}/technologies`).then(e=>e.json()).then(e=>e)},85:function(e,t,n){"use strict";n.d(t,"c",(function(){return o})),n.d(t,"a",(function(){return i})),n.d(t,"d",(function(){return l})),n.d(t,"b",(function(){return s}));var c=n(4);const a=Object(c.a)();let o=async()=>await fetch(`${a}/projects`).then(e=>e.json()).then(e=>e);const i=async e=>{console.log("ere"),console.log(JSON.stringify(e));const t=await fetch(`${a}/projects`,{method:"post",body:JSON.stringify(e),headers:{"Content-Type":"application/json"}}).then(e=>e.json()).then(e=>e);console.log(t)},l=async(e,t)=>{console.log(e);await fetch(`${a}/projects/${t}`,{method:"put",body:JSON.stringify(e),headers:{"Content-Type":"application/json"}}).then(e=>e.json()).then(e=>e)},s=async e=>{const t=await fetch(`${a}/projects/${e}`,{method:"delete",headers:{"Content-Type":"application/json"}}).then(e=>e.json()).then(e=>e);console.log(t)}},88:function(e,t,n){"use strict";n.r(t),n.d(t,"Projects",(function(){return p}));var c=n(0),a=n(7),o=(n(84),n(83)),i=n(3),l=n(85),s=n(5),d=n(91);n(92);const r=e=>{for(;e.childNodes.length;)e.removeChild(e.lastChild)};async function p(){let e=Object(c.e)(".main-content-scrollable");r(e),e.appendChild(Object(c.c)("div","loading")).innerHTML="loading...";const t=await Object(l.c)();r(e);const n=e.clientWidth;if(t.forEach(async(t,i)=>{const r=e.appendChild(Object(c.c)("div","project-wrap")),h=r.appendChild(Object(o.a)(`src/img/${t.img_url}`,t.name,!0,t.site_url,t.build_date));console.log(h);let b="false",u=Object(c.c)("div","link-modal"),j=Object(c.f)(".img-wrapper"),m=Object(c.f)(".inner-img-wrap"),g=Object(c.c)("div","tech-icons");t.technologies.forEach(e=>{g.appendChild(Object(c.c)("img","tech-icon")).src=`src/img/${e.icon_url}`});let f=Object(c.c)("div","description");if(f.innerHTML=t.description,n<900?(u.appendChild(g),u.appendChild(f)):(u.appendChild(f),u.appendChild(g)),u.appendChild(Object(c.c)("div","link-modal-icons")).innerHTML=`<div><a href=${t.site_url} target='_blank'><i class="fas fa-home fa-fw"></i></a>\n    <p class='home-tool-tip'>website</p></div>\n\n    <div><a href=${t.github_url} target='_blank'><i class="fab fa-github"></i></a>\n    <p class='github-tool-tip'>github</p></div>`,console.log(m[0].children[1]),j[i].addEventListener("click",async()=>{if("true"===b)b="false",m[i].classList.add("close-curtain"),m[i].classList.remove("open-curtain"),j[i].lastChild.remove(),j[i].style.width="80%",j[i].style.padding="6%",j[i].style.margin="0",r.style.margin="0 10% 3% 10%",m[i].style.width="100%",r.classList.remove("project-wrap-click"),h.lastChild.remove();else if("false"===b){console.log(b),b="true",m[i].classList.add("open-curtain"),m[i].classList.remove("close-curtain"),j[i].appendChild(u),n<900?(j[i].style.flexDirection="column",u.style.width="90%",g.style.width="80%",u.style.marginTop="5%",u.style.background="rgb(240, 253, 253)"):(j[i].style.width="90%",j[i].style.padding="2%",j[i].style.margin="0 auto",r.style.margin="0 1%",m[i].style.width="99%",m[i].style.height="99%"),n<900?(console.log("900-"),h.appendChild(g)):(console.log("900+"),m[i].appendChild(g)),console.log(h),j[i].style.setProperty("--animation","animate-img-wrapper 1.5s linear forwards"),r.classList.add("project-wrap-click")}}),await Object(a.d)()){const e=Object(c.c)("div","edit-project-wrapper"),n=Object(s.a)("show-edit-button","submit","update");n.addEventListener("click",()=>{console.log(r.lastChild.className),"edit-project-form"!==r.lastChild.className?Object(d.EditProject)(r,t):r.lastChild.remove()}),e.appendChild(n);const a=Object(s.a)("delete-project","submit","delete");a.addEventListener("click",async()=>{let e=confirm(`Are you sure you want to delete ${t.name}?`);e&&await Object(l.b)(t.id),e&&await p()}),e.appendChild(a),r.appendChild(e)}}),await Object(a.d)()){console.log("not fair");let n=Object(s.a)("show-add-form","submit","add project");n.addEventListener("click",()=>{console.log(e.lastChild.previousSibling.className),"show-add-form"===e.lastChild.previousSibling.className?Object(d.EditProject)(e,t[0],"addProject"):e.lastChild.remove()}),Object(c.b)(e,n)}e.appendChild(Object(i.a)())}},91:function(e,t,n){"use strict";n.r(t),n.d(t,"EditProject",(function(){return s}));var c=n(5),a=n(84),o=n(85),i=n(88),l=n(0);const s=async(e,t,n)=>{if(console.log("add",n),"addProject"===n)for(let e in t)t[e]="";let s={},d=e=>{console.log(e.target.name,e.target.value),s[e.target.name]=e.target.value,console.log("cmon",s)},r=Object(c.c)("edit-project-form"),p=Object(l.c)("div","edit-form-inputs");r.appendChild(p),Object.keys(t).forEach(e=>{if("id"!==e&&"technologies"!==e&&"created_at"!==e&&"updated_at"!==e){s[e]=t[e];const a=Object(c.d)({className:"edit-form-input",name:e,type:"text",value:"addProject"===n?"":s[e],placeholder:e,handleChange:d});p.appendChild(a)}});const h=Object(l.c)("div","edit-form-checkboxes");r.appendChild(h),(await Object(a.a)()).map(e=>{let a;void 0===n&&t.technologies.forEach(t=>{e.name===t.name&&(console.log(e.name,t.name),a="checked")});let o=Object(c.b)({className:"edit-project-chkbox",name:e.name,id:e.name,value:e.id,checked:"addProject"===n?"":a});h.appendChild(o),h.appendChild(Object(c.e)("tech-box-label",e.name,"tech-box"))}),r.appendChild(Object(c.a)("edit-project-button","submit","addProject"===n?"add new project":"submit")),Object(l.b)(e,r),r.addEventListener("submit",async e=>{e.preventDefault(),console.log("add",n);const c=document.querySelectorAll("input[type=checkbox]:checked");console.log(c,s),s.technologies=[],c.forEach(e=>{s.technologies.push(e.value)}),console.log("add",s),"addProject"===n?await Object(o.a)(s):await Object(o.d)(s,t.id),await Object(i.Projects)()})}},92:function(e,t,n){var c=n(1),a=n(93);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.i,a,""]]);var o={insert:"head",singleton:!1},i=(c(a,o),a.locals?a.locals:{});e.exports=i},93:function(e,t,n){}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,