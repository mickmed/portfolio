(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{106:function(e,n,t){"use strict";t.r(n),t.d(n,"Lessons",(function(){return s}));var o=t(0),i=t(3);t(97);async function s(){const e=await Object(o.e)(".main-content-scrollable");for(console.log(e);e.childNodes.length;)e.removeChild(e.lastChild);const n=e.clientWidth;let t,s;console.log(n),n>600&&n<900?(t=480,s=299):n>900&&n<1200?(t=960,s=569):n>1200&&(t=1440,s=839);const d=Object(o.c)("div","linked-lists");d.innerHTML="<div><h3>Linked Lists</h3>\n    <p>Slide 1) The unshift method calls the Node class and adds a new node to the beginning of the linked list. We can see that as each new node is created <i>this.next</i> points to the following node.</p>\n    <p>Slide 2) The push method calls the node class and adds a new node to the end of the linked list. The <i>this.next</i> property of the previous node points to our new node.</p>\n    \n    </div>";const l=Object(o.c)("div","doc-wrapper"),a=Object(o.c)("iframe","slides");a.src="https://docs.google.com/presentation/d/e/2PACX-1vTDsnjcpJ49de8trQkESBQbLFeeqywV_VJB_mgb5l1oqsaLTs5Rp8rS-XbDhjFeJDpqrNuZ34GGCabs/embed?start=false&loop=false&delayms=3000",a.frameborder="0",a.allowfullscreen="true",a.mozallowfullscreen="true",a.webkitallowfullscreen="true",l.appendChild(a);const c=Object(o.c)("div","linked-lists");c.innerHTML="<div>\n        <p>Slide 3) The insertAt method adds a new node to the specified position in the list. The <i>this.next</i> property of the previous node points to our new node.</p>\n    <p>Slide 4) The getAt method retrieves the given node at the given index.</p>\n    <p>Slide 5) The deleteAt removes a given node at the given index.</p>\n   \n    \n    \n    </div>",e.appendChild(d),e.appendChild(l),e.appendChild(c),e.appendChild(Object(i.a)())}},97:function(e,n,t){var o=t(1),i=t(98);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var s={insert:"head",singleton:!1},d=(o(i,s),i.locals?i.locals:{});e.exports=d},98:function(e,n,t){}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQ29tcG9uZW50cy9MZXNzb25zL0xlc3NvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbXBvbmVudHMvTGVzc29ucy9MZXNzc29ucy5zY3NzPzY0NDkiXSwibmFtZXMiOlsiYXN5bmMiLCJMZXNzb25zIiwibWFpbkNvbnRlbnRTY3JvbGxhYmxlIiwiY29uc29sZSIsImxvZyIsImNoaWxkTm9kZXMiLCJsZW5ndGgiLCJyZW1vdmVDaGlsZCIsImxhc3RDaGlsZCIsIndpZHRoIiwiY2xpZW50V2lkdGgiLCJmcmFtZVdpZHRoIiwiZnJhbWVIZWlnaHQiLCJsaW5rTGlzdCIsImlubmVySFRNTCIsImRvY1dyYXBwZXIiLCJkb2MiLCJzcmMiLCJmcmFtZWJvcmRlciIsImFsbG93ZnVsbHNjcmVlbiIsIm1vemFsbG93ZnVsbHNjcmVlbiIsIndlYmtpdGFsbG93ZnVsbHNjcmVlbiIsImFwcGVuZENoaWxkIiwibGlua0xpc3QyIiwiYXBpIiwiY29udGVudCIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwibW9kdWxlIiwiaSIsIm9wdGlvbnMiLCJleHBvcnRlZCIsImxvY2FscyIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJpS0FNT0EsZUFBZUMsSUFHbEIsTUFBTUMsUUFBOEIsWUFBRyw0QkFFdkMsSUFEQUMsUUFBUUMsSUFBSUYsR0FDTEEsRUFBc0JHLFdBQVdDLFFBQ3BDSixFQUFzQkssWUFBWUwsRUFBc0JNLFdBRzVELE1BQU1DLEVBQVFQLEVBQXNCUSxZQUVwQyxJQUFJQyxFQUFZQyxFQURoQlQsUUFBUUMsSUFBSUssR0FFUkEsRUFBUSxLQUFPQSxFQUFRLEtBQ3ZCRSxFQUFhLElBQ2JDLEVBQWMsS0FFUEgsRUFBUSxLQUFPQSxFQUFRLE1BQzlCRSxFQUFhLElBQ2JDLEVBQWMsS0FHUEgsRUFBUSxPQUNmRSxFQUFhLEtBQ2JDLEVBQWMsS0FHbEIsTUFBTUMsRUFBVyxZQUFLLE1BQU8sZ0JBQzdCQSxFQUFTQyxVQUNMLHdiQU1KLE1BQU1DLEVBQWEsWUFBSyxNQUFPLGVBQ3pCQyxFQUFNLFlBQUssU0FBVSxVQUMzQkEsRUFBSUMsSUFBTSw0S0FDVkQsRUFBSUUsWUFBYyxJQUNsQkYsRUFBSUcsZ0JBQWtCLE9BQ3RCSCxFQUFJSSxtQkFBcUIsT0FDekJKLEVBQUlLLHNCQUF3QixPQUM1Qk4sRUFBV08sWUFBWU4sR0FFdkIsTUFBTU8sRUFBWSxZQUFLLE1BQU8sZ0JBQzlCQSxFQUFVVCxVQUNOLGtYQVNKWixFQUFzQm9CLFlBQVlULEdBQ2xDWCxFQUFzQm9CLFlBQVlQLEdBQ2xDYixFQUFzQm9CLFlBQVlDLEdBQ2xDckIsRUFBc0JvQixZQUFZLGlCLG1CQy9EdEMsSUFBSUUsRUFBTSxFQUFRLEdBQ0ZDLEVBQVUsRUFBUSxJQUlDLGlCQUZ2QkEsRUFBVUEsRUFBUUMsV0FBYUQsRUFBUUUsUUFBVUYsS0FHL0NBLEVBQVUsQ0FBQyxDQUFDRyxFQUFPQyxFQUFJSixFQUFTLE1BRzlDLElBQUlLLEVBQVUsQ0FFZCxPQUFpQixPQUNqQixXQUFvQixHQUloQkMsR0FGU1AsRUFBSUMsRUFBU0ssR0FFWEwsRUFBUU8sT0FBU1AsRUFBUU8sT0FBUyxJQUlqREosRUFBT0ssUUFBVUYsRyIsImZpbGUiOiI1LmU3MmFmNzIxODQ0OWQ1ODlmZjVhLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBjZWNsLCBxcyB9IGZyb20gJy4uL0hlbHBlcnMvZG9tSGVscGVyJ1xuaW1wb3J0IHsgRm9vdGVyIH0gZnJvbSAnLi4vRm9vdGVyL0Zvb3Rlci5qcydcbmltcG9ydCAnLi9MZXNzc29ucy5zY3NzJ1xuXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBMZXNzb25zKCkge1xuXG5cbiAgICBjb25zdCBtYWluQ29udGVudFNjcm9sbGFibGUgPSBhd2FpdCBxcyhcIi5tYWluLWNvbnRlbnQtc2Nyb2xsYWJsZVwiKTtcbiAgICBjb25zb2xlLmxvZyhtYWluQ29udGVudFNjcm9sbGFibGUpXG4gICAgd2hpbGUgKG1haW5Db250ZW50U2Nyb2xsYWJsZS5jaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgICBtYWluQ29udGVudFNjcm9sbGFibGUucmVtb3ZlQ2hpbGQobWFpbkNvbnRlbnRTY3JvbGxhYmxlLmxhc3RDaGlsZClcbiAgICB9XG5cbiAgICBjb25zdCB3aWR0aCA9IG1haW5Db250ZW50U2Nyb2xsYWJsZS5jbGllbnRXaWR0aFxuICAgIGNvbnNvbGUubG9nKHdpZHRoKVxuICAgIGxldCBmcmFtZVdpZHRoLCBmcmFtZUhlaWdodFxuICAgIGlmICh3aWR0aCA+IDYwMCAmJiB3aWR0aCA8IDkwMCkge1xuICAgICAgICBmcmFtZVdpZHRoID0gNDgwXG4gICAgICAgIGZyYW1lSGVpZ2h0ID0gMjk5XG5cbiAgICB9IGVsc2UgaWYgKHdpZHRoID4gOTAwICYmIHdpZHRoIDwgMTIwMCkge1xuICAgICAgICBmcmFtZVdpZHRoID0gOTYwXG4gICAgICAgIGZyYW1lSGVpZ2h0ID0gNTY5XG5cblxuICAgIH0gZWxzZSBpZiAod2lkdGggPiAxMjAwKSB7XG4gICAgICAgIGZyYW1lV2lkdGggPSAxNDQwXG4gICAgICAgIGZyYW1lSGVpZ2h0ID0gODM5XG4gICAgfVxuXG4gICAgY29uc3QgbGlua0xpc3QgPSBjZWNsKCdkaXYnLCAnbGlua2VkLWxpc3RzJylcbiAgICBsaW5rTGlzdC5pbm5lckhUTUwgPVxuICAgICAgICBgPGRpdj48aDM+TGlua2VkIExpc3RzPC9oMz5cbiAgICA8cD5TbGlkZSAxKSBUaGUgdW5zaGlmdCBtZXRob2QgY2FsbHMgdGhlIE5vZGUgY2xhc3MgYW5kIGFkZHMgYSBuZXcgbm9kZSB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBsaW5rZWQgbGlzdC4gV2UgY2FuIHNlZSB0aGF0IGFzIGVhY2ggbmV3IG5vZGUgaXMgY3JlYXRlZCA8aT50aGlzLm5leHQ8L2k+IHBvaW50cyB0byB0aGUgZm9sbG93aW5nIG5vZGUuPC9wPlxuICAgIDxwPlNsaWRlIDIpIFRoZSBwdXNoIG1ldGhvZCBjYWxscyB0aGUgbm9kZSBjbGFzcyBhbmQgYWRkcyBhIG5ldyBub2RlIHRvIHRoZSBlbmQgb2YgdGhlIGxpbmtlZCBsaXN0LiBUaGUgPGk+dGhpcy5uZXh0PC9pPiBwcm9wZXJ0eSBvZiB0aGUgcHJldmlvdXMgbm9kZSBwb2ludHMgdG8gb3VyIG5ldyBub2RlLjwvcD5cbiAgICBcbiAgICA8L2Rpdj5gXG5cbiAgICBjb25zdCBkb2NXcmFwcGVyID0gY2VjbCgnZGl2JywgJ2RvYy13cmFwcGVyJylcbiAgICBjb25zdCBkb2MgPSBjZWNsKCdpZnJhbWUnLCAnc2xpZGVzJylcbiAgICBkb2Muc3JjID0gYGh0dHBzOi8vZG9jcy5nb29nbGUuY29tL3ByZXNlbnRhdGlvbi9kL2UvMlBBQ1gtMXZURHNuamNwSjQ5ZGU4dHJRa0VTQlFiTEZlZXF5d1ZfVkpCX21nYjVsMW9xc2FMVHM1UnA4clMtWGJEaGpGZUpEcHFyTnVaMzRHR0NhYnMvZW1iZWQ/c3RhcnQ9ZmFsc2UmbG9vcD1mYWxzZSZkZWxheW1zPTMwMDBgXG4gICAgZG9jLmZyYW1lYm9yZGVyID0gXCIwXCJcbiAgICBkb2MuYWxsb3dmdWxsc2NyZWVuID0gXCJ0cnVlXCJcbiAgICBkb2MubW96YWxsb3dmdWxsc2NyZWVuID0gXCJ0cnVlXCJcbiAgICBkb2Mud2Via2l0YWxsb3dmdWxsc2NyZWVuID0gXCJ0cnVlXCJcbiAgICBkb2NXcmFwcGVyLmFwcGVuZENoaWxkKGRvYylcblxuICAgIGNvbnN0IGxpbmtMaXN0MiA9IGNlY2woJ2RpdicsICdsaW5rZWQtbGlzdHMnKVxuICAgIGxpbmtMaXN0Mi5pbm5lckhUTUwgPVxuICAgICAgICBgPGRpdj5cbiAgICAgICAgPHA+U2xpZGUgMykgVGhlIGluc2VydEF0IG1ldGhvZCBhZGRzIGEgbmV3IG5vZGUgdG8gdGhlIHNwZWNpZmllZCBwb3NpdGlvbiBpbiB0aGUgbGlzdC4gVGhlIDxpPnRoaXMubmV4dDwvaT4gcHJvcGVydHkgb2YgdGhlIHByZXZpb3VzIG5vZGUgcG9pbnRzIHRvIG91ciBuZXcgbm9kZS48L3A+XG4gICAgPHA+U2xpZGUgNCkgVGhlIGdldEF0IG1ldGhvZCByZXRyaWV2ZXMgdGhlIGdpdmVuIG5vZGUgYXQgdGhlIGdpdmVuIGluZGV4LjwvcD5cbiAgICA8cD5TbGlkZSA1KSBUaGUgZGVsZXRlQXQgcmVtb3ZlcyBhIGdpdmVuIG5vZGUgYXQgdGhlIGdpdmVuIGluZGV4LjwvcD5cbiAgIFxuICAgIFxuICAgIFxuICAgIDwvZGl2PmBcblxuICAgIG1haW5Db250ZW50U2Nyb2xsYWJsZS5hcHBlbmRDaGlsZChsaW5rTGlzdClcbiAgICBtYWluQ29udGVudFNjcm9sbGFibGUuYXBwZW5kQ2hpbGQoZG9jV3JhcHBlcilcbiAgICBtYWluQ29udGVudFNjcm9sbGFibGUuYXBwZW5kQ2hpbGQobGlua0xpc3QyKVxuICAgIG1haW5Db250ZW50U2Nyb2xsYWJsZS5hcHBlbmRDaGlsZChGb290ZXIoKSlcblxufSIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL0xlc3Nzb25zLnNjc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cbnZhciBleHBvcnRlZCA9IGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB7fTtcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0ZWQ7Il0sInNvdXJjZVJvb3QiOiIifQ==