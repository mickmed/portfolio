(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{108:function(e,n,t){var o=t(1),s=t(109);"string"==typeof(s=s.__esModule?s.default:s)&&(s=[[e.i,s,""]]);var i={insert:"head",singleton:!1},d=(o(s,i),s.locals?s.locals:{});e.exports=d},109:function(e,n,t){},119:function(e,n,t){"use strict";t.r(n),t.d(n,"Lessons",(function(){return i}));var o=t(0),s=t(4);t(108);async function i(){const e=await Object(o.e)(".scrollable-content");for(console.log(e);e.childNodes.length;)e.removeChild(e.lastChild);const n=e.clientWidth;let t,i;console.log(n),n>600&&n<900?(t=480,i=299):n>900&&n<1200?(t=960,i=569):n>1200&&(t=1440,i=839);const d=Object(o.c)("div","linked-lists");d.innerHTML="<div><h3>Linked Lists</h3>\n            <p>Slide 1) The unshift method calls the Node class and adds a new node to the beginning of the linked list. We can see that as each new node is created <i>this.next</i> points to the following node.</p>\n        </div>";const l=Object(o.c)("a","link");l.href="https://docs.google.com/presentation/d/e/2PACX-1vTDsnjcpJ49de8trQkESBQbLFeeqywV_VJB_mgb5l1oqsaLTs5Rp8rS-XbDhjFeJDpqrNuZ34GGCabs/embed?start=false&loop=false&delayms=3000",l.innerHTML="link to orginal document",l.target="_blank";const a=Object(o.c)("div","doc-wrapper"),c=Object(o.c)("iframe","slides");c.src="https://docs.google.com/presentation/d/e/2PACX-1vTDsnjcpJ49de8trQkESBQbLFeeqywV_VJB_mgb5l1oqsaLTs5Rp8rS-XbDhjFeJDpqrNuZ34GGCabs/embed?start=false&loop=false&delayms=3000",c.frameborder="0",c.allowfullscreen="true",c.mozallowfullscreen="true",c.webkitallowfullscreen="true",a.appendChild(c);const p=Object(o.c)("div","linked-lists");p.innerHTML="<div>\n            <p>Slide 2) The push method calls the node class and adds a new node to the end of the linked list. The <i>this.next</i> property of the previous node points to our new node.</p>\n            <p>Slide 3) The insertAt method adds a new node to the specified position in the list. The <i>this.next</i> property of the previous node points to our new node.</p>\n            <p>Slide 4) The getAt method retrieves the given node at the given index.</p>\n            <p>Slide 5) The deleteAt removes a given node at the given index.</p>\n        </div>",e.appendChild(d),e.appendChild(l),e.appendChild(a),e.appendChild(p),e.appendChild(Object(s.a)())}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQ29tcG9uZW50cy9MZXNzb25zL0xlc3Nzb25zLnNjc3M/NjQ0OSIsIndlYnBhY2s6Ly8vLi9zcmMvQ29tcG9uZW50cy9MZXNzb25zL0xlc3NvbnMuanMiXSwibmFtZXMiOlsiYXBpIiwiY29udGVudCIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwibW9kdWxlIiwiaSIsIm9wdGlvbnMiLCJleHBvcnRlZCIsImxvY2FscyIsImV4cG9ydHMiLCJhc3luYyIsIkxlc3NvbnMiLCJtYWluQ29udGVudFNjcm9sbGFibGUiLCJjb25zb2xlIiwibG9nIiwiY2hpbGROb2RlcyIsImxlbmd0aCIsInJlbW92ZUNoaWxkIiwibGFzdENoaWxkIiwid2lkdGgiLCJjbGllbnRXaWR0aCIsImZyYW1lV2lkdGgiLCJmcmFtZUhlaWdodCIsImxpbmtMaXN0IiwiaW5uZXJIVE1MIiwibGluayIsImhyZWYiLCJ0YXJnZXQiLCJkb2NXcmFwcGVyIiwiZG9jIiwic3JjIiwiZnJhbWVib3JkZXIiLCJhbGxvd2Z1bGxzY3JlZW4iLCJtb3phbGxvd2Z1bGxzY3JlZW4iLCJ3ZWJraXRhbGxvd2Z1bGxzY3JlZW4iLCJhcHBlbmRDaGlsZCIsImxpbmtMaXN0MiJdLCJtYXBwaW5ncyI6IjZFQUFBLElBQUlBLEVBQU0sRUFBUSxHQUNGQyxFQUFVLEVBQVEsS0FJQyxpQkFGdkJBLEVBQVVBLEVBQVFDLFdBQWFELEVBQVFFLFFBQVVGLEtBRy9DQSxFQUFVLENBQUMsQ0FBQ0csRUFBT0MsRUFBSUosRUFBUyxNQUc5QyxJQUFJSyxFQUFVLENBRWQsT0FBaUIsT0FDakIsV0FBb0IsR0FJaEJDLEdBRlNQLEVBQUlDLEVBQVNLLEdBRVhMLEVBQVFPLE9BQVNQLEVBQVFPLE9BQVMsSUFJakRKLEVBQU9LLFFBQVVGLEcsK0hDZFZHLGVBQWVDLElBR2xCLE1BQU1DLFFBQThCLFlBQUcsdUJBRXZDLElBREFDLFFBQVFDLElBQUlGLEdBQ0xBLEVBQXNCRyxXQUFXQyxRQUNwQ0osRUFBc0JLLFlBQVlMLEVBQXNCTSxXQUc1RCxNQUFNQyxFQUFRUCxFQUFzQlEsWUFFcEMsSUFBSUMsRUFBWUMsRUFEaEJULFFBQVFDLElBQUlLLEdBRVJBLEVBQVEsS0FBT0EsRUFBUSxLQUN2QkUsRUFBYSxJQUNiQyxFQUFjLEtBRVBILEVBQVEsS0FBT0EsRUFBUSxNQUM5QkUsRUFBYSxJQUNiQyxFQUFjLEtBR1BILEVBQVEsT0FDZkUsRUFBYSxLQUNiQyxFQUFjLEtBR2xCLE1BQU1DLEVBQVcsWUFBSyxNQUFPLGdCQUM3QkEsRUFBU0MsVUFDTCxzUUFJSixNQUFNQyxFQUFPLFlBQUssSUFBSyxRQUN2QkEsRUFBS0MsS0FBTyw0S0FDWkQsRUFBS0QsVUFBWSwyQkFDakJDLEVBQUtFLE9BQVMsU0FFZCxNQUFNQyxFQUFhLFlBQUssTUFBTyxlQUN6QkMsRUFBTSxZQUFLLFNBQVUsVUFDM0JBLEVBQUlDLElBQU0sNEtBQ1ZELEVBQUlFLFlBQWMsSUFDbEJGLEVBQUlHLGdCQUFrQixPQUN0QkgsRUFBSUksbUJBQXFCLE9BQ3pCSixFQUFJSyxzQkFBd0IsT0FDNUJOLEVBQVdPLFlBQVlOLEdBRXZCLE1BQU1PLEVBQVksWUFBSyxNQUFPLGdCQUM5QkEsRUFBVVosVUFDTix5akJBT0paLEVBQXNCdUIsWUFBWVosR0FDbENYLEVBQXNCdUIsWUFBWVYsR0FDbENiLEVBQXNCdUIsWUFBWVAsR0FDbENoQixFQUFzQnVCLFlBQVlDLEdBQ2xDeEIsRUFBc0J1QixZQUFZIiwiZmlsZSI6IjguNTYzMmNiNjFhZGRjOTM5MTc2YTMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9MZXNzc29ucy5zY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG52YXIgZXhwb3J0ZWQgPSBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDoge307XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydGVkOyIsIlxuaW1wb3J0IHsgY2VjbCwgcXMgfSBmcm9tICcuLi9IZWxwZXJzL2RvbUhlbHBlcidcbmltcG9ydCB7IEZvb3RlciB9IGZyb20gJy4uL0Zvb3Rlci9Gb290ZXIuanMnXG5pbXBvcnQgJy4vTGVzc3NvbnMuc2NzcydcblxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gTGVzc29ucygpIHtcblxuXG4gICAgY29uc3QgbWFpbkNvbnRlbnRTY3JvbGxhYmxlID0gYXdhaXQgcXMoXCIuc2Nyb2xsYWJsZS1jb250ZW50XCIpO1xuICAgIGNvbnNvbGUubG9nKG1haW5Db250ZW50U2Nyb2xsYWJsZSlcbiAgICB3aGlsZSAobWFpbkNvbnRlbnRTY3JvbGxhYmxlLmNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICAgIG1haW5Db250ZW50U2Nyb2xsYWJsZS5yZW1vdmVDaGlsZChtYWluQ29udGVudFNjcm9sbGFibGUubGFzdENoaWxkKVxuICAgIH1cblxuICAgIGNvbnN0IHdpZHRoID0gbWFpbkNvbnRlbnRTY3JvbGxhYmxlLmNsaWVudFdpZHRoXG4gICAgY29uc29sZS5sb2cod2lkdGgpXG4gICAgbGV0IGZyYW1lV2lkdGgsIGZyYW1lSGVpZ2h0XG4gICAgaWYgKHdpZHRoID4gNjAwICYmIHdpZHRoIDwgOTAwKSB7XG4gICAgICAgIGZyYW1lV2lkdGggPSA0ODBcbiAgICAgICAgZnJhbWVIZWlnaHQgPSAyOTlcblxuICAgIH0gZWxzZSBpZiAod2lkdGggPiA5MDAgJiYgd2lkdGggPCAxMjAwKSB7XG4gICAgICAgIGZyYW1lV2lkdGggPSA5NjBcbiAgICAgICAgZnJhbWVIZWlnaHQgPSA1NjlcblxuXG4gICAgfSBlbHNlIGlmICh3aWR0aCA+IDEyMDApIHtcbiAgICAgICAgZnJhbWVXaWR0aCA9IDE0NDBcbiAgICAgICAgZnJhbWVIZWlnaHQgPSA4MzlcbiAgICB9XG5cbiAgICBjb25zdCBsaW5rTGlzdCA9IGNlY2woJ2RpdicsICdsaW5rZWQtbGlzdHMnKVxuICAgIGxpbmtMaXN0LmlubmVySFRNTCA9XG4gICAgICAgIGA8ZGl2PjxoMz5MaW5rZWQgTGlzdHM8L2gzPlxuICAgICAgICAgICAgPHA+U2xpZGUgMSkgVGhlIHVuc2hpZnQgbWV0aG9kIGNhbGxzIHRoZSBOb2RlIGNsYXNzIGFuZCBhZGRzIGEgbmV3IG5vZGUgdG8gdGhlIGJlZ2lubmluZyBvZiB0aGUgbGlua2VkIGxpc3QuIFdlIGNhbiBzZWUgdGhhdCBhcyBlYWNoIG5ldyBub2RlIGlzIGNyZWF0ZWQgPGk+dGhpcy5uZXh0PC9pPiBwb2ludHMgdG8gdGhlIGZvbGxvd2luZyBub2RlLjwvcD5cbiAgICAgICAgPC9kaXY+YFxuXG4gICAgY29uc3QgbGluayA9IGNlY2woJ2EnLCAnbGluaycpXG4gICAgbGluay5ocmVmID0gYGh0dHBzOi8vZG9jcy5nb29nbGUuY29tL3ByZXNlbnRhdGlvbi9kL2UvMlBBQ1gtMXZURHNuamNwSjQ5ZGU4dHJRa0VTQlFiTEZlZXF5d1ZfVkpCX21nYjVsMW9xc2FMVHM1UnA4clMtWGJEaGpGZUpEcHFyTnVaMzRHR0NhYnMvZW1iZWQ/c3RhcnQ9ZmFsc2UmbG9vcD1mYWxzZSZkZWxheW1zPTMwMDBgXG4gICAgbGluay5pbm5lckhUTUwgPSAnbGluayB0byBvcmdpbmFsIGRvY3VtZW50J1xuICAgIGxpbmsudGFyZ2V0ID0gJ19ibGFuaydcblxuICAgIGNvbnN0IGRvY1dyYXBwZXIgPSBjZWNsKCdkaXYnLCAnZG9jLXdyYXBwZXInKVxuICAgIGNvbnN0IGRvYyA9IGNlY2woJ2lmcmFtZScsICdzbGlkZXMnKVxuICAgIGRvYy5zcmMgPSBgaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vcHJlc2VudGF0aW9uL2QvZS8yUEFDWC0xdlREc25qY3BKNDlkZTh0clFrRVNCUWJMRmVlcXl3Vl9WSkJfbWdiNWwxb3FzYUxUczVScDhyUy1YYkRoakZlSkRwcXJOdVozNEdHQ2Ficy9lbWJlZD9zdGFydD1mYWxzZSZsb29wPWZhbHNlJmRlbGF5bXM9MzAwMGBcbiAgICBkb2MuZnJhbWVib3JkZXIgPSBcIjBcIlxuICAgIGRvYy5hbGxvd2Z1bGxzY3JlZW4gPSBcInRydWVcIlxuICAgIGRvYy5tb3phbGxvd2Z1bGxzY3JlZW4gPSBcInRydWVcIlxuICAgIGRvYy53ZWJraXRhbGxvd2Z1bGxzY3JlZW4gPSBcInRydWVcIlxuICAgIGRvY1dyYXBwZXIuYXBwZW5kQ2hpbGQoZG9jKVxuXG4gICAgY29uc3QgbGlua0xpc3QyID0gY2VjbCgnZGl2JywgJ2xpbmtlZC1saXN0cycpXG4gICAgbGlua0xpc3QyLmlubmVySFRNTCA9XG4gICAgICAgIGA8ZGl2PlxuICAgICAgICAgICAgPHA+U2xpZGUgMikgVGhlIHB1c2ggbWV0aG9kIGNhbGxzIHRoZSBub2RlIGNsYXNzIGFuZCBhZGRzIGEgbmV3IG5vZGUgdG8gdGhlIGVuZCBvZiB0aGUgbGlua2VkIGxpc3QuIFRoZSA8aT50aGlzLm5leHQ8L2k+IHByb3BlcnR5IG9mIHRoZSBwcmV2aW91cyBub2RlIHBvaW50cyB0byBvdXIgbmV3IG5vZGUuPC9wPlxuICAgICAgICAgICAgPHA+U2xpZGUgMykgVGhlIGluc2VydEF0IG1ldGhvZCBhZGRzIGEgbmV3IG5vZGUgdG8gdGhlIHNwZWNpZmllZCBwb3NpdGlvbiBpbiB0aGUgbGlzdC4gVGhlIDxpPnRoaXMubmV4dDwvaT4gcHJvcGVydHkgb2YgdGhlIHByZXZpb3VzIG5vZGUgcG9pbnRzIHRvIG91ciBuZXcgbm9kZS48L3A+XG4gICAgICAgICAgICA8cD5TbGlkZSA0KSBUaGUgZ2V0QXQgbWV0aG9kIHJldHJpZXZlcyB0aGUgZ2l2ZW4gbm9kZSBhdCB0aGUgZ2l2ZW4gaW5kZXguPC9wPlxuICAgICAgICAgICAgPHA+U2xpZGUgNSkgVGhlIGRlbGV0ZUF0IHJlbW92ZXMgYSBnaXZlbiBub2RlIGF0IHRoZSBnaXZlbiBpbmRleC48L3A+XG4gICAgICAgIDwvZGl2PmBcblxuICAgIG1haW5Db250ZW50U2Nyb2xsYWJsZS5hcHBlbmRDaGlsZChsaW5rTGlzdClcbiAgICBtYWluQ29udGVudFNjcm9sbGFibGUuYXBwZW5kQ2hpbGQobGluaylcbiAgICBtYWluQ29udGVudFNjcm9sbGFibGUuYXBwZW5kQ2hpbGQoZG9jV3JhcHBlcilcbiAgICBtYWluQ29udGVudFNjcm9sbGFibGUuYXBwZW5kQ2hpbGQobGlua0xpc3QyKVxuICAgIG1haW5Db250ZW50U2Nyb2xsYWJsZS5hcHBlbmRDaGlsZChGb290ZXIoKSlcblxufSJdLCJzb3VyY2VSb290IjoiIn0=